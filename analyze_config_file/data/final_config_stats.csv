Repository,Last_Commit_Content,Fail_To_Parse,task_config_parameter,task_trigger_parameter,input_file_setting,required_item,model_env,model,model_parameter,prompt,prompt_setting,output_setting,other
TeTedo/NFT_lottery,"name: CR - Code Review By Chat Gpt

permissions:
  contents: read
  pull-requests: write

on:
  pull_request:
    types: [opened, synchronize]

jobs:
  codeReviewByChatGpt:
    runs-on: ubuntu-latest
    steps:
      - uses: anc95/ChatGPT-CodeReview@main
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          LANGUAGE: Korean
",False,False,False,False,False,False,False,False,True,False,False
gfargo/coco,"name: AI Review
permissions:
  contents: read
  pull-requests: write
on:
  pull_request:
    types:
      - opened
      - reopened
      - synchronize
jobs:
  test:
    if: ${{ contains(github.event.*.labels.*.name, 'gpt review') }} # Optional; to run only when a label is attached
    runs-on: ubuntu-latest
    steps:
      - uses: anc95/ChatGPT-CodeReview@main
        env:
          GITHUB_TOKEN: '${{ secrets.GITHUB_TOKEN }}'
          OPENAI_API_KEY: '${{ secrets.OPENAI_API_KEY }}'
",False,False,False,False,False,False,False,False,False,False,False
yuriykulikov/AlarmClock,"name: ChatGPT Code Review

permissions:
  contents: read
  pull-requests: write

on:
  pull_request:
    types: [opened, reopened, synchronize]

jobs:
  ChatGPT:
    runs-on: ubuntu-latest
    steps:
      - uses: anc95/ChatGPT-CodeReview@main
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          MODEL: gpt-3.5-turbo
          top_p: 1
          temperature: 1
",False,False,False,False,False,True,True,False,False,False,False
COS-project/cos-frontend,"name: Code Review

permissions:
  contents: read
  pull-requests: write

on:
  pull_request:
    types: [opened, synchronize]

jobs:
  review:
    runs-on: ubuntu-latest
    steps:
      - uses: anc95/ChatGPT-CodeReview@main
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          OPENAI_API_KEY: ${{ secrets.GPT_KEY }}
          LANGUAGE: Korean
          MODEL: gpt-3.5-turbo
",False,False,False,False,False,True,False,False,True,False,False
gravis-os/gravis-os,"name: ChatGPT Code Reviewer

permissions:
  contents: read
  pull-requests: write

on:
  pull_request:
    types: [opened, reopened, synchronize]

jobs:
  test:
    if: ${{ contains(github.event.*.labels.*.name, 'GPT Review') }} # Optional; to run only when a label is attached
    runs-on: ubuntu-latest
    steps:
      - uses: anc95/ChatGPT-CodeReview@main
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
",False,False,False,False,False,False,False,False,False,False,False
NU-WA-Project/FE,"name: Code Review

permissions:
  contents: read
  pull-requests: write

on:
  pull_request:
    types: [opened, reopened, synchronize]
    branches:
      - '*'
      - '!main'

jobs:
  test:
    # if: ${{ contains(github.event.*.labels.*.name, 'gpt review') }} # Optional; to run only when a label is attached
    runs-on: ubuntu-latest
    steps:
      - uses: anc95/ChatGPT-CodeReview@main
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          # Optional
          LANGUAGE: Korean
          OPENAI_API_ENDPOINT: https://api.openai.com/v1
          MODEL: gpt-3.5-turbo # https://platform.openai.com/docs/models
          PROMPT:
          top_p: 1 # https://platform.openai.com/docs/api-reference/chat/create#chat/create-top_p
          temperature: 1 # https://platform.openai.com/docs/api-reference/chat/create#chat/create-temperature
          max_tokens: 3500
          MAX_PATCH_LENGTH: 10000 # if the patch/diff length is large than MAX_PATCH_LENGTH, will be ignored and won't review. By default, with no MAX_PATCH_LENGTH set, there is also no limit for the patch/diff length.
",False,False,False,True,True,True,True,True,True,False,False
team-collabor/coworkers,"name: Code Review with ChatGPT

permissions:
  contents: read
  pull-requests: write

on:
  pull_request:
    types: [opened, reopened, synchronize]

jobs:
  test:
    # if: ${{ contains(github.event.*.labels.*.name, 'gpt review') }} # Optional; to run only when a label is attached
    runs-on: ubuntu-latest
    steps:
      - uses: anc95/ChatGPT-CodeReview@main
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          # Optional
          LANGUAGE: Korean
          OPENAI_API_ENDPOINT: https://api.openai.com/v1
          MODEL: gpt-3.5-turbo # https://platform.openai.com/docs/models
",False,False,False,False,True,True,False,False,True,False,False
hyperskill/mobile-app,"name: GPT Code Review

on:
  pull_request:
    types: [opened, reopened, synchronize]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref_name }}
  cancel-in-progress: true

permissions:
  contents: read
  pull-requests: write

jobs:
  code-review:
    if: ${{ contains(github.event.*.labels.*.name, 'gpt-review') }}
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
      - uses: anc95/ChatGPT-CodeReview@main
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          LANGUAGE: English
          OPENAI_API_ENDPOINT: https://api.openai.com/v1
          MODEL: gpt-3.5-turbo-16k # https://platform.openai.com/docs/models
          PROMPT: 'Provide suggestions for improving the changes in this PR. If the PR has no clear issues, mention that no suggestions are needed. You must look at the code to see if there are any bugs, improvements, or optimizations. You must praise good changes. You must ask questions if something is not clear. This PR is for the Kotlin Multiplatform Mobile project, where the main languages are Kotlin and Swift.'
          top_p: 1 # https://platform.openai.com/docs/api-reference/chat/create#chat/create-top_p
          temperature: 1 # https://platform.openai.com/docs/api-reference/chat/create#chat/create-temperature
          max_tokens: 10000
          MAX_PATCH_LENGTH: 10000 # if the patch/diff length is large than MAX_PATCH_LENGTH, will be ignored and won't review.",False,False,False,True,True,True,True,True,True,False,False
TUSB/TheUnusualSkyBlock,"# kics-scan disable=555ab8f9-2001-455e-a077-f2d0f41e2fb9
---
name: PR Code Review
on:
  pull_request:
    types:
      - ready_for_review
      - synchronize
permissions:
  contents: read
  pull-requests: write

jobs:
  review:
    runs-on: ubuntu-latest
    steps:
      # 1) issue_commentイベントならPR情報(HEAD SHA)を取得
      - name: Retrieve PR HEAD SHA (for issue_comment only)
        if: ${{ github.event_name == 'issue_comment' }}
        id: pr-info
        uses: actions/github-script@v6.3.0
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script:
            |
            // コメントされたIssueがPull Requestであることを前提
            const prNumber = context.payload.issue.number;
            // PR情報を取得
            const { data: pr } = await github.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: prNumber
            });
            // HEADのSHAを出力
            core.setOutput('sha', pr.head.sha);

      # 2) チェックアウト (コメントのときは上ステップから取得したSHA, PRイベントならPull RequestのSHA)
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ steps.pr-info.outputs.sha || github.event.pull_request.head.sha }}

      # 3) 現在のコミットがマージコミットかを判定
      - name: Check if current commit is a merge commit
        id: check_merge
        run:
          |
          # 実際にチェックアウトしているコミットSHAを確認
          CURRENT_SHA=""${{ steps.pr-info.outputs.sha || github.event.pull_request.head.sha }}""
          PARENTS_COUNT=$(git rev-list --parents -n 1 ""${CURRENT_SHA}"" | wc -w)
          # 親が1つであれば (コミットID + 親1つ) = 2単語
          # 親が2つなら (コミットID + 親2つ) = 3単語 以上となるので、
          # 3以上ならマージコミットとみなす
          if [ ""${PARENTS_COUNT}"" -ge 3 ]; then
            echo ""is_merge=true"" >> ""${GITHUB_OUTPUT}""
          else
            echo ""is_merge=false"" >> ""${GITHUB_OUTPUT}""
          fi

      # 4) マージコミットならスキップ
      - name: Skip on merge commit
        if: steps.check_merge.outputs.is_merge == 'true'
        run:
          |
          echo ""This is a merge commit. Skipping this job.""
          exit 0

      # 5) ChatGPTを用いた自動コードレビュー
      - uses: anc95/ChatGPT-CodeReview@main
        if:
          >
          (
            (github.event_name == 'pull_request' && github.event.action == 'ready_for_review')
          )
          ||
          (
            (github.event_name == 'pull_request' && github.event.action == 'synchronize'
             && contains(github.event.pull_request.labels.*.name, 'プリーズレビュー'))
          )
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          LANGUAGE: Japanese
          OPENAI_API_ENDPOINT: https://api.openai.com/v1
          MODEL: o1-mini
          PROMPT:
            |
            Request: perform PR review mcfuntion code for Minecraft 1.21.1
            Role: Respond as code reviewer for Minecraft distribution world “The Unusual SkyBlock”.
            Regulation: keep brief to point, 50-300 words or less
            Rule:
            . Avoid hallucination provide reliable information.
            . do not copy answers, use original content.
            . review code in Minecraft 1.21.1
            Review Refine:
            . check quality readability code
            . Evaluate impact proposed changes on existing functionality
            . identify performance concerns
            . identify potential impact on gameplay aware of changes affect gameplay
            Reference:
            - Repository: [The Unusual SkyBlock](https://github.com/TUSB/TheUnusualSkyBlock)
            - Documentation:
              - [GitHub Wiki](https://github.com/TUSB/TheUnusualSkyBlock/wiki/Top)
              - [Seesaawiki](https://seesaawiki.jp/theunusualskyblock/)
            Run Scenario: respond as code reviewer.
          top_p: 1
          temperature: 1
          MAX_PATCH_LENGTH: 10000
          IGNORE_PATTERNS: ./*,*.md
",False,False,False,True,True,True,True,True,True,False,False
LESSERAFIM-Aespa/TripMate,"name: Code Review

permissions:
  contents: read
  pull-requests: write

on:
  pull_request:
    types: [opened, synchronize]

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: anc95/ChatGPT-CodeReview@main
        env:
          GITHUB_TOKEN: ${{ secrets.TEST_TOKEN }}
          OPENAI_API_KEY: ${{ secrets.GIT_API_KEY }}
          LANGUAGE: Korean
",False,False,False,False,False,False,False,False,True,False,False
YJU-OKURA/project_minori-gin-deployment-repo,"name: OpenAI Code Review

permissions:
  contents: read
  pull-requests: write

on:
  pull_request_target:
    types: [opened, reopened, synchronize]
jobs:
  code_review:
    runs-on: ubuntu-latest
    steps:
      - uses: anc95/ChatGPT-CodeReview@v1.0.11
        env:
          GITHUB_TOKEN: ${{ secrets.ADMIN_TOKEN }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          MODEL: gpt-3.5-turbo
          LANGUAGE: Korean",False,False,False,False,False,True,False,False,True,False,False
PatientPaI/patientpal-frontend,"name: Code Review

permissions:
  contents: read
  pull-requests: write

on:
  pull_request:
    types: [opened, reopened, synchronize]

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: anc95/ChatGPT-CodeReview@main
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          # Optional
          LANGUAGE: Korean
          OPENAI_API_ENDPOINT: https://api.openai.com/v1
          MODEL: gpt-4o-mini
",False,False,False,False,True,True,False,False,True,False,False
NEUQ-ACM/weekly-23,"name: Code Review

permissions:
  contents: read
  pull-requests: write

on:
  pull_request:
    types: [opened, reopened, synchronize]

jobs:
  test:
    # if: ${{ contains(github.event.*.labels.*.name, 'gpt review') }} # Optional; to run only when a label is attached
    runs-on: ubuntu-latest
    steps:
      - uses: anc95/ChatGPT-CodeReview@v1.0.10
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          # Optional
          LANGUAGE: Chinese
          OPENAI_API_ENDPOINT: https://api.openai.com/v1
          MODEL: gpt-3.5-turbo # https://platform.openai.com/docs/models
          PROMPT: ${{secrets.PROMPT}}
          top_p: 1 # https://platform.openai.com/docs/api-reference/chat/create#chat/create-top_p
          temperature: 1 # https://platform.openai.com/docs/api-reference/chat/create#chat/create-temperature
          max_tokens: 10000
          MAX_PATCH_LENGTH: 10000 # if the patch/diff length is large than MAX_PATCH_LENGTH, will be ignored and won't review. By default, with no MAX_PATCH_LENGTH set, there is also no limit for the patch/diff length.
",False,False,False,True,True,True,True,True,True,False,False
WeBankFinTech/fes.js,"name: Code Review


permissions:
  contents: read
  pull-requests: write


on:
  pull_request:
    types: [opened, reopened]


jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: anc95/ChatGPT-CodeReview@main
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          # Optional
          LANGUAGE: Chinese
          MODEL: gpt-3.5-turbo
          top_p: 1
          temperature: 1",False,False,False,False,False,True,True,False,True,False,False
Mai0313/chess-ai,"name: OpenAI Code Review

on:
  pull_request:
    types:
      - opened
      - synchronize
      - reopened
      - ready_for_review

permissions:
  contents: write
  pull-requests: write
  issues: write

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.sha }}-${{ github.event_name == 'workflow_dispatch' }}
  cancel-in-progress: true

jobs:
  code-review:
    runs-on: ubuntu-latest
    # container: catthehacker/ubuntu:act-20.04  # Uncomment it if you use it on Gitea

    steps:
      - name: Disable SSL Verify
        run: git config --global http.sslVerify false

      - name: Checkout
        uses: actions/checkout@v4.1.2

      - name: OpenAI Code Review
        uses: anc95/ChatGPT-CodeReview@main
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          # Optional
          LANGUAGE: Traditional Chinese
          OPENAI_API_ENDPOINT: https://api.openai.com/v1
          MODEL: gpt-3.5-turbo-16k # https://platform.openai.com/docs/models
          PROMPT: # example: Please check if there are any confusions or irregularities in the following code diff:
          top_p: 1 # https://platform.openai.com/docs/api-reference/chat/create#chat/create-top_p
          temperature: 0.1 # https://platform.openai.com/docs/api-reference/chat/create#chat/create-temperature
          max_tokens: 10000
          MAX_PATCH_LENGTH: 10000 # if the patch/diff length is large than MAX_PATCH_LENGTH, will be ignored and won't review. By default, with no MAX_PATCH_LENGTH set, there is also no limit for the patch/diff length.

  code-reviewers:
    runs-on: ubuntu-latest
    # container: catthehacker/ubuntu:act-20.04  # Uncomment it if you use it on Gitea

    steps:
      - name: Disable SSL Verify
        run: git config --global http.sslVerify false

      - name: Checkout
        uses: actions/checkout@v4.1.2

      - name: Get diff of the pull request
        id: get_diff
        shell: bash
        env:
          PULL_REQUEST_HEAD_REF: ""${{ github.event.pull_request.head.ref }}""
        run: |-
          git fetch origin ""${{ env.PULL_REQUEST_HEAD_REF }}:${{ env.PULL_REQUEST_HEAD_REF }}""
          git checkout ""${{ env.PULL_REQUEST_HEAD_REF }}""
          git diff ""origin/${{ env.PULL_REQUEST_HEAD_REF }}"" > ""diff.txt""
          # shellcheck disable=SC2086
          echo ""diff=$(cat ""diff.txt"")"" >> $GITHUB_ENV

      - name: OpenAI Code Reviewers
        uses: yu-iskw/gpt-code-review-action@v0.3.0
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          openai_api_key: ${{ secrets.OPENAI_API_KEY }}
          github_repository: ${{ github.repository }}
          github_pull_request_number: ${{ github.event.pull_request.number }}
          git_commit_hash: ${{ github.event.pull_request.head.sha }}
          model: gpt-3.5-turbo-16k
          temperature: 0.1
          max_tokens: 10000
          top_p: 1
          frequency_penalty: 0.0
          presence_penalty: 0.0
          pull_request_diff: |-
            ${{ steps.get_diff.outputs.pull_request_diff }}
          pull_request_chunk_size: 3500
          extra_prompt: |-
            You are very familiar with python too.
          log_level: ""DEBUG""
",False,False,False,True,True,True,True,True,True,False,False
Team-B1ND/alimo-ios,"name: Code Review

permissions:
  contents: read
  pull-requests: write

on:
  pull_request:
    types: [opened, synchronize]

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: anc95/ChatGPT-CodeReview@main
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          OPENAI_API_KEY: ${{ secrets.OPEN_AI_KEY }}
          LANGUAGE: Korean
",False,False,False,False,False,False,False,False,True,False,False
three-ping/SyncDay_Front,"name: Code Review

permissions:
  contents: read
  pull-requests: write

on:
  pull_request:
    types: [opened, reopened, synchronize]
  push:
    branches:
      - ""develop""

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: anc95/ChatGPT-CodeReview@main
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          # optional
          LANGUAGE: Korean
          OPENAI_API_ENDPOINT: https://api.openai.com/v1
          MODEL: gpt-4 # https://platform.openai.com/docs/models
          PROMPT: Please check if there are any confusions or irregularities in the following code diff
          top_p: 1 # https://platform.openai.com/docs/api-reference/chat/create#chat/create-top_p
          temperature: 0.7 # https://platform.openai.com/docs/api-reference/chat/create#chat/create-temperature
          max_tokens: 6000
          MAX_PATCH_LENGTH: 8000",False,False,False,True,True,True,True,True,True,False,False
etff/web-novel,"# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-gradle

name: Java CI with Gradle

on:
  pull_request:
    branches: [ ""develop"" ]

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
      - name: Cache Gradle packages
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Test with Gradle
        run: ./gradlew --info test

      - name: Publish Unit Test Results
        uses: EnricoMi/publish-unit-test-result-action@v1
        if: ${{ always() }}
        with:
          files: build/test-results/**/*.xml
      - uses: anc95/ChatGPT-CodeReview@main
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          LANGUAGE: Korean

      # 추가
      - name: Cleanup Gradle Cache
        # Remove some files from the Gradle cache, so they aren't cached by GitHub Actions.
        # Restoring these files from a GitHub Actions cache might cause problems for future builds.
        if: ${{ always() }}
        run: |
          rm -f ~/.gradle/caches/modules-2/modules-2.lock
          rm -f ~/.gradle/caches/modules-2/gc.properties
",False,False,False,False,False,False,False,False,True,False,False
fresh-trash-project/fresh-trash-backend,"name: 🤖Code Review Bot

permissions:
  contents: read
  pull-requests: write

on:
  pull_request:
    types: [opened]

jobs:
  review:
    # if: ${{ contains(github.event.*.labels.*.name, 'gpt review') }} # Optional; to run only when a label is attached
    runs-on: ubuntu-latest
    steps:
      - uses: anc95/ChatGPT-CodeReview@main
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          # Optional
          LANGUAGE: English
          OPENAI_API_ENDPOINT: https://api.openai.com/v1
          MODEL: gpt-4o # https://platform.openai.com/docs/models
          # https://github.com/PickleBoxer/dev-chatgpt-prompts?tab=readme-ov-file#code-review
          PROMPT: ""I'm working on a JAVA project and I need you to review my code and suggest improvements""
          temperature: 0.2 # https://platform.openai.com/docs/api-reference/chat/create#chat/create-temperature
          max_tokens: 4096
          MAX_PATCH_LENGTH: 4096 # if the patch/diff length is large than MAX_PATCH_LENGTH, will be ignored and won't review. By default, with no MAX_PATCH_LENGTH set, there is also no limit for the patch/diff length.
",False,False,False,True,True,True,True,True,True,False,False
zae-park/zae-engine,"name: Code Review with GPT

on:
  pull_request:
    types: [ opened, synchronize, reopened ]
    branches:
      - dev
  issue_comment:
    types: [created]

permissions:
  contents: read
  pull-requests: write
  issues: read

jobs:
  check-trigger:
    runs-on: ubuntu-latest

    outputs:
      trigger_found: ${{ steps.set_trigger.outputs.trigger_found }}

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Check Trigger from PR or Comment
        id: check_trigger
        env:
          PR_TITLE: ""${{ github.event.pull_request.title }}""
          PR_BODY: ""${{ github.event.pull_request.body }}""
          COMMENT_BODY: ""${{ github.event.comment.body }}""
          EVENT_NAME: ""${{ github.event_name }}""
        run: |
          echo ""Checking PR or Comment for trigger '!GPT'...""
          TRIGGER_FOUND=false

          if [ ""$EVENT_NAME"" == ""pull_request"" ]; then
            if echo ""$PR_BODY"" | grep -iFq ""!GPT""; then
              TRIGGER_FOUND=true
            fi
          elif [ ""$EVENT_NAME"" == ""issue_comment"" ]; then
            # Pull Request의 댓글인지 확인
            if [ -n ""${{ github.event.issue.pull_request }}"" ]; then
              if echo ""$COMMENT_BODY"" | grep -iFq ""!GPT""; then
                TRIGGER_FOUND=true
              fi
            fi
          fi

          echo ""Trigger found: $TRIGGER_FOUND""
          echo ""::set-output name=trigger_found::$TRIGGER_FOUND""

      - name: Set Trigger Output
        id: set_trigger
        run: |
          echo ""::set-output name=trigger_found::$TRIGGER_FOUND""

  review:
    needs: check-trigger
    runs-on: ubuntu-latest
    if: needs.check-trigger.outputs.trigger_found == 'true'
    steps:
      - name: Run GPT Code Review
        uses: anc95/ChatGPT-CodeReview@main
        env:
          GITHUB_TOKEN: ${{ secrets.PAT_GITHUB }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          LANGUAGE: Korean

      - name: Skip Job if Trigger Not Found
        run: |
          echo ""⚠️ Trigger not found. Skipping the job.""
",False,False,False,False,False,False,False,False,True,False,False
jgeofil/mlreadme-astro-blog,"name: Code Review

permissions:
  contents: read
  pull-requests: write

on:
  pull_request:
    types: [opened, reopened, synchronize]

jobs:
  test:
    # if: ${{ contains(github.event.*.labels.*.name, 'gpt review') }} # Optional; to run only when a label is attached
    runs-on: ubuntu-latest
    steps:
      - uses: anc95/ChatGPT-CodeReview@main
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          # Optional
          LANGUAGE: English
          OPENAI_API_ENDPOINT: https://api.openai.com/v1
          MODEL: gpt-4o-mini # https://platform.openai.com/docs/models
          PROMPT: Please check if there are any confusions or irregularities in the following code diff
          top_p: 1 # https://platform.openai.com/docs/api-reference/chat/create#chat/create-top_p
          temperature: 1 # https://platform.openai.com/docs/api-reference/chat/create#chat/create-temperature
          max_tokens: 10000
          MAX_PATCH_LENGTH: 10000 # if the patch/diff length is large than MAX_PATCH_LENGTH, will be ignored and won't review. By default, with no MAX_PATCH_LENGTH set, there is also no limit for the patch/diff length.
          IGNORE_PATTERNS: /node_modules,*.md # Regex pattern to ignore files, separated by comma
",False,False,False,True,True,True,True,True,True,False,False
YJU-OKURA/project_minori-next-deployment-repo,"name: OpenAI Code Review

permissions:
  contents: read
  pull-requests: write
  issues: write

on:
  pull_request:
    types: [opened, synchronize]
jobs:
  code-review:
    runs-on: ubuntu-latest
    steps:
      - uses: anc95/ChatGPT-CodeReview@main
        env:
          GITHUB_TOKEN: ${{ secrets.ADMIN_TOKEN }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          LANGUAGE: Korean
",False,False,False,False,False,False,False,False,True,False,False
lwshen/portfolio-remix,"name: Code Review

permissions:
  contents: read
  pull-requests: write

on:
  pull_request:
    types: [opened, reopened, synchronize, closed]

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: anc95/ChatGPT-CodeReview@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          OPENAI_API_ENDPOINT: ${{ secrets.OPENAI_API_ENDPOINT }}
          MODEL: gpt-4-turbo
          LANGUAGE: Chinese",False,False,False,False,True,True,False,False,True,False,False
m0nclous/click-claim-bot,"name: Code Review

permissions:
    contents: read
    pull-requests: write

on:
    pull_request:
        types: [opened, reopened, synchronize]

jobs:
    chat-gpt:
        runs-on: ubuntu-latest
        steps:
            - uses: anc95/ChatGPT-CodeReview@v1.0.13
              env:
                  # В начале каждого задания GitHub автоматически создает уникальный секретный токен GITHUB_TOKEN
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

                  # Токен из личного кабинета api.proxyapi.ru
                  OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}

                  # Язык Code Review
                  LANGUAGE: Russian

                  # OpenAPI endpoint. api.proxyapi.ru используется для РФ
                  OPENAI_API_ENDPOINT: https://api.proxyapi.ru/openai/v1

                  # Используемая модель ChatGPT
                  MODEL: gpt-3.5-turbo

                  # Стартовый контекст для ChatGPT
                  PROMPT: Вы опытный разработчик на NodeJS, и ваша работа — проверять Pull Request. Пожалуйста, просмотрите следующий код на предмет каких-либо недоразумений или нарушений. Не тратьте время на комментарии о том, что уже работает отлично. Жду конструктивной критики и предложений по улучшению кода, только полезные и обстоятельные замечания.

                  # Максимальное количество токенов, которое может быть сгенерировано в завершении.
                  max_tokens: 4096
",False,False,False,False,True,True,True,True,True,False,False
codestates-seb/fe-sprint-my-agora-states-server,"name: Code Review

permissions:
  contents: read
  pull-requests: write

on:
  pull_request:
    types: [opened, reopened, synchronize]

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: anc95/ChatGPT-CodeReview@v1.0.4
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
",False,False,False,False,False,False,False,False,False,False,False
g471000/coding-alarm-clock,"name: ChatGPT Code Review

permissions:
  contents: read
  pull-requests: write

on:
  pull_request:
    types: [opened, reopened, synchronize]

jobs:
  ChatGPT:
    runs-on: ubuntu-latest
    steps:
      - uses: anc95/ChatGPT-CodeReview@main
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          MODEL: gpt-3.5-turbo
          top_p: 1
          temperature: 1
",False,False,False,False,False,True,True,False,False,False,False
bottle-note/bottle-note-api-server,"name: Code Review

permissions:
  contents: read
  pull-requests: write

on:
  pull_request:
    types: [ opened, reopened, synchronize ]

jobs:
  code-review:
    runs-on: ubuntu-latest
    steps:
      - uses: anc95/ChatGPT-CodeReview@main
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          LANGUAGE: Korean
",False,False,False,False,False,False,False,False,True,False,False
AirtestProject/Airtest,"name: Code Review

permissions:
  contents: read
  pull-requests: write

on:
  pull_request:
    types: [opened, reopened, synchronize]

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: anc95/ChatGPT-CodeReview@main
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          # Optional
          LANGUAGE: Chinese
          MODEL:
          top_p: 1
          temperature: 1",False,False,False,False,False,True,True,False,True,False,False
Synaptrix/ChatGPT-Desktop,"name: Code Review

permissions:
  contents: read
  pull-requests: write

on:
  pull_request:
    types: [opened, reopened, synchronize]

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: anc95/ChatGPT-CodeReview@main
        env:
          GITHUB_TOKEN: ${{ secrets.RELEASE_TOKEN }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          # Optional
          LANGUAGE: Chinese
          MODEL: gpt-3.5-turbo-0301
          top_p: 1
          temperature: 0.8
",False,False,False,False,False,True,True,False,True,False,False
bottle-note/bottle-note-frontend,"name: Code Review

permissions:
  contents: read
  pull-requests: write

on:
  pull_request:
    types: [ opened, reopened, synchronize ]

jobs:
  code-review:
    runs-on: ubuntu-latest
    steps:
      - uses: anc95/ChatGPT-CodeReview@main
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          LANGUAGE: Korean
",False,False,False,False,False,False,False,False,True,False,False
FISCO-BCOS/FISCO-BCOS,"name: Code Review

permissions:
  contents: read
  pull-requests: write
  # id-token: read

on:
  pull_request:
    types: [opened, reopened]

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: anc95/ChatGPT-CodeReview@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          LANGUAGE: Chinese
",False,False,False,False,False,False,False,False,True,False,False
NEUQ-ACM/weekly-report-24,"name: Code Review

permissions:
  contents: read
  pull-requests: write

on:
  pull_request:
    types: [opened, reopened, synchronize]

jobs:
  test:
    # if: ${{ contains(github.event.*.labels.*.name, 'gpt review') }} # Optional; to run only when a label is attached
    runs-on: ubuntu-latest
    steps:
      - uses: anc95/ChatGPT-CodeReview@v1.0.10
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          # Optional
          LANGUAGE: Chinese
          OPENAI_API_ENDPOINT: https://api.openai.com/v1
          MODEL: gpt-3.5-turbo # https://platform.openai.com/docs/models
          PROMPT: ${{secrets.PROMPT}}
          top_p: 1 # https://platform.openai.com/docs/api-reference/chat/create#chat/create-top_p
          temperature: 1 # https://platform.openai.com/docs/api-reference/chat/create#chat/create-temperature
          max_tokens: 10000
          MAX_PATCH_LENGTH: 10000 # if the patch/diff length is large than MAX_PATCH_LENGTH, will be ignored and won't review. By default, with no MAX_PATCH_LENGTH set, there is also no limit for the patch/diff length.
",False,False,False,True,True,True,True,True,True,False,False
transmission-remote-gui/transgui,"name: ChatGPT Code Review

permissions:
  contents: read
  pull-requests: write

on:
  pull_request:
    types: [opened, reopened, synchronize]

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: anc95/ChatGPT-CodeReview@main
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          MODEL: gpt-4
          top_p: 1
          temperature: 0.2
",False,False,False,False,False,True,True,False,False,False,False
storm-software/acidic,"name: ""Code Review""
permissions:
  contents: read
  pull-requests: write
on:
  pull_request:
    types:
      - opened
      - reopened
      - synchronize

env:
  CI: true
  NX_VERBOSE_LOGGING: true
  GITHUB_ACTOR: stormie-bot
  GITHUB_TOKEN: ${{ secrets.STORMIE_GITHUB_TOKEN }}
  OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: anc95/ChatGPT-CodeReview@main

",False,False,False,False,False,False,False,False,False,False,False
yukieiji/ExtremeRoles,"name: CodeReview

permissions:
  contents: read
  pull-requests: write

on:
  pull_request:
    types: [opened, reopened, synchronize]

jobs:
  codereview:
    # タイトルに`:review`が含まれている場合のみ実行
    if: ${{ contains(github.event.pull_request.title, '!review') }}
    runs-on: ubuntu-latest
    steps:
      # プルリクエストのタイトルを表示
      - name: Display PR title
        run: |
          echo ""PullRequest: ${{ github.event.pull_request.title }}""
      # ChatGPT-CodeReviewを実行
      - uses: anc95/ChatGPT-CodeReview@main
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          OPENAI_API_KEY: ${{ secrets.REVIEW_API_KEY }}
          LANGUAGE: Japanese
          # OpenRouterのエンドポイントを指定
          OPENAI_API_ENDPOINT: https://openrouter.ai/api/v1
          # 利用するモデルを指定
          MODEL: google/gemini-2.0-flash-thinking-exp:free
          # プロンプトをカスタマイズ
          PROMPT: |
            あなたはCSharpのコードをレビューするレビュアーです、入力されるCSharpコードを以下の観点を元にレビューしてください

            --- レビュー観点 ---
            - Nullチェックや境界チェックが抜けていないか
            - 適切にNullableを使用しているか
            - UnityにおけるCSharpのコーディングルールを守れているか
            - 変更の妥当性、及びアルゴリズムの正確性
            - パフォーマンスにおいて重大な問題が存在していないか
            --- レビュー観点終了 ---

            --- 返答形式 ---
            - 日本語にて返信を行う
            - 返答はわかりやすくかつ簡潔に行うこと
            - 問題点と修正点、修正方法を記載すること
            --- 返答形式終了 ---

          top_p: 1
          temperature: 0.5
          max_tokens: 32768
          IGNORE_PATTERNS: '*.md'
          INCLUDE_PATTERNS: '*.cs'
",False,False,False,True,True,True,True,True,True,False,False
Chia1104/chia1104.dev,"name: GPT Review

permissions:
  contents: read
  pull-requests: write

on:
  pull_request:
    types: [ opened, labeled, unlabeled, synchronize, reopened ]

jobs:
  test:
    if: ${{ contains(github.event.*.labels.*.name, 'reviewer:gpt') }}
    runs-on: ubuntu-latest
    steps:
      - uses: anc95/ChatGPT-CodeReview@main
        env:
          GITHUB_TOKEN: ${{ secrets.GH_PUBLIC_TOKEN }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          LANGUAGE: Chinese
          MODEL:
          top_p: 1
          temperature: 1
",False,False,False,False,False,True,True,False,True,False,False
JustCode-Gallery/Gallery-with-me,"name: Code Review From ChatGPT

permissions:
  contents: read
  pull-requests: write

on:
  pull_request:
    types: [opened, synchronize]

jobs:
  code-review:
    runs-on: ubuntu-latest
    steps:
      - uses: anc95/ChatGPT-CodeReview@main
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          OPENAI_API_KEY: ${{ secrets.ChatGPT_API_KEY }}
          LANGUAGE: Korean
          MODEL: gpt-3.5-turbo
",False,False,False,False,False,True,False,False,True,False,False
anc95/ChatGPT-CodeReview,"name: Code Review

permissions:
  contents: read
  pull-requests: write

on:
  pull_request:
    types: [opened, reopened, synchronize]

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: anc95/ChatGPT-CodeReview@main
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          LANGUAGE: English
          OPENAI_API_ENDPOINT: https://api.bianxie.ai/v1
          LOG_LEVEL: debug
          INCLUDE_PATTERNS: 'src/**/*'
",False,False,False,True,True,False,False,False,True,False,False
EveryMutsa/Every-Mutsa,"name: Code Review

permissions:
  contents: read
  pull-requests: write

on:
  pull_request:
    types: [opened, reopened, synchronize]

jobs:
  test:
    if: ${{ contains(github.event.*.labels.*.name, 'review') }} # 선택적; review라는 레이블이 붙은 경우에만 GPT가 리뷰함
    runs-on: ubuntu-latest
    steps:
      - uses: anc95/ChatGPT-CodeReview@main
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          # 선택적
          LANGUAGE: Korean
          OPENAI_API_ENDPOINT: https://api.openai.com/v1
          MODEL: gpt-3.5-turbo
          top_p: 1
          temperature: 1
",False,False,False,False,True,True,True,False,True,False,False
cround-team/cround-server,"name: Code Review

permissions:
  contents: read
  pull-requests: write

on:
  pull_request:
    types: [opened, synchronize]

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: anc95/ChatGPT-CodeReview@main
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          LANGUAGE: Korean
",False,False,False,False,False,False,False,False,True,False,False
fec-cache-me-if-you-can/FEC-cache-up,"name: Code Review

permissions:
  contents: read
  pull-requests: write

on:
  pull_request:
    types: [opened, reopened, synchronize]

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: anc95/ChatGPT-CodeReview@main
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          LANGUAGE: English
          OPENAI_API_ENDPOINT: https://api.openai.com/v1
          MODEL: gpt-4o
          PROMPT: |
            As an experienced React developer, review the following code diff for a React application. Analyze both the removed (-) and added (+) lines. Focus on:

            1. Impact on component structure and organization
            2. Changes in state management and hooks usage
            3. Performance implications
            4. Adherence to React best practices
            5. Code readability and maintainability improvements or regressions
            6. Changes in error handling and edge case coverage
            7. Accessibility improvements or regressions
            8. Effects on responsive design
            9. Implications for testing coverage and quality
            10. Security considerations

            For each significant change:
            - Explain the purpose and potential impact
            - Suggest improvements if necessary
            - Highlight good practices introduced
            - Identify any potential bugs or code smells
            - Provide specific refactoring suggestions where applicable

            Be concise but thorough. Prioritize the most important findings.
          top_p: 1
          temperature: 1
          max_tokens: 10000
          MAX_PATCH_LENGTH: 10000
",False,False,False,True,True,True,True,True,True,False,False
Team-pingping/pingping-FE,"name: Code Review

permissions:
  contents: read
  pull-requests: write

on:
  pull_request:
    types: [opened, reopened]

jobs:
  test:
    # if: ${{ contains(github.event.*.labels.*.name, 'gpt review') }} # Optional; to run only when a label is attached
    runs-on: ubuntu-latest
    steps:
      - uses: anc95/ChatGPT-CodeReview@main
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          # Optional
          LANGUAGE: Korean # default: English
          OPENAI_API_ENDPOINT: https://api.openai.com/v1
          MODEL: ""gpt-4o-mini"" # https://platform.openai.com/docs/models
          PROMPT: ""code review please"" # https://platform.openai.com/docs/api-reference/chat/create#chat/create-prompt
          top_p: 1 # https://platform.openai.com/docs/api-reference/chat/create#chat/create-top_p
          temperature: 1 # https://platform.openai.com/docs/api-reference/chat/create#chat/create-temperature
          max_tokens: 10000
          MAX_PATCH_LENGTH: 10000 # if the patch/diff length is large than MAX_PATCH_LENGTH, will be ignored and won't review. By default, with no MAX_PATCH_LENGTH set, there is also no limit for the patch/diff length.
",False,False,False,True,True,True,True,True,True,False,False
potenday-project/311TEN003,"name: ChatGPT Code Review

permissions:
  contents: read
  pull-requests: write

on:
  pull_request:
    types: [opened, reopened, synchronize]
    branches: [""main""]

jobs:
  Create_ChatGPT_CodeReview:
    runs-on: ubuntu-latest
    steps:
      - uses: anc95/ChatGPT-CodeReview@main
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          OPENAI_API_KEY: ${{ secrets.OPEN_AI_SECRET_KEY }}
          LANGUAGE: Korean
",False,False,False,False,False,False,False,False,True,False,False
BCSDLab/KOIN_ADMIN_V2,"name: Code Review

permissions:
  contents: read
  pull-requests: write

on:
  pull_request:
    types: [opened, reopened]

jobs:
  test:
    # if: ${{ contains(github.event.*.labels.*.name, 'gpt review') }} #  Optional; to run only when a label is attached
    runs-on: ubuntu-latest
    steps:
      - uses: anc95/ChatGPT-CodeReview@main
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          # Optional
          LANGUAGE: Korean
          OPENAI_API_ENDPOINT: https://api.openai.com/v1
          MODEL: gpt-4o-mini # https://platform.openai.com/docs/models
          PROMPT: 다음 코드에서 오류가 있는지 검토하고 개선 사항이 있다면 diff 형식으로 제안해줘. 이때 제안하는 코드블록은 전체코드가 아닌 개선이 필요한 부분만 포함해야해. 리뷰를 할 때 주요 사항과 개선 제안 사항을 간단하게 설명하고 코드 오류를 검토해줘. 개선사항이 어떤 형식인지는 알려주지 않아도 좋아. 단순 주석추가, 수정이 필요하지 않은 내용은 제외해줘.
          top_p: 1 # https://platform.openai.com/docs/api-reference/chat/create#chat/create-top_p
          temperature: 1 # https://platform.openai.com/docs/api-reference/chat/create#chat/create-temperature
          max_tokens: 10000
          MAX_PATCH_LENGTH: 1500 # if the patch/diff length is large than MAX_PATCH_LENGTH, will be ignored and won't review. By default, with no MAX_PATCH_LENGTH set, there is also no limit for the patch/diff length.",False,False,False,True,True,True,True,True,True,False,False
boocam-project/FastTime-backend,"name: Code Review by gpt

permissions:
  contents: read
  pull-requests: write

on:
  pull_request:
    types: [opened, reopened, synchronize]

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: anc95/ChatGPT-CodeReview@main
        env:
          GITHUB_TOKEN: ${{ secrets.GIT_TOKEN }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          # optional
          LANGUAGE: Korean
          MODEL: gpt-3.5-turbo
",False,False,False,False,False,True,False,False,True,False,False
UnUniFi/chain,"permissions:
  contents: read
  pull-requests: write

on:
  workflow_dispatch:

jobs:
  code-review:
    runs-on: ubuntu-latest
    steps:
      - uses: anc95/ChatGPT-CodeReview@main
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          # Optional
          LANGUAGE: English
          MODEL: gpt-3.5-turbo
          top_p: 1
          temperature: 1
",False,False,False,False,False,True,True,False,True,False,False
6-dreaming-stars/space-star-front-monorepo,"name: Code Review

permissions:
  contents: read
  pull-requests: write

on:
  pull_request:
    types: [opened, reopened, synchronize, labeled, unlabeled]

jobs:
  test:
    if: ${{ contains(github.event.pull_request.labels.*.name, 'gpt review') }}
    runs-on: ubuntu-latest
    steps:
      - uses: anc95/ChatGPT-CodeReview@main
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          LANGUAGE: Korean
          MODEL: gpt-3.5-turbo
",False,False,False,False,False,True,False,False,True,False,False
jhkim-a/codereview,"name: Code Review

permissions:
  contents: read
  pull-requests: write

on:
  pull_request:
    types: [opened, reopened, synchronize]

jobs:
  test:
    # if: ${{ contains(github.event.*.labels.*.name, 'gpt review') }} # Optional; to run only when a label is attached
    runs-on: ubuntu-latest
    steps:
      - uses: anc95/ChatGPT-CodeReview@main
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          # Optional
          LANGUAGE: Korean
          OPENAI_API_ENDPOINT: https://api.openai.com/v1
          MODEL: gpt-3.5-turbo # https://platform.openai.com/docs/models
",False,False,False,False,True,True,False,False,True,False,False
WeBankFinTech/fes-design,"name: Code Review

permissions:
  contents: read
  pull-requests: write

on:
  pull_request:
    types: [opened, reopened]

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: anc95/ChatGPT-CodeReview@main
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          # Optional
          LANGUAGE: Chinese
          MODEL: gpt-3.5-turbo
          top_p: 1
          temperature: 1",False,False,False,False,False,True,True,False,True,False,False
DDD-Community/Chevit-Android,"name: code-review

permissions:
  contents: read
  pull-requests: write

on:
  merge_group:
  pull_request:
    types: [opened, reopened, synchronize]

jobs:
  code-review:
    name: Code Review By Chatgpt
    runs-on: ubuntu-latest
    steps:
      - name: CodeReview
        uses: anc95/ChatGPT-CodeReview@main
        timeout-minutes: 1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          LANGUAGE: Korean
",False,False,False,False,False,False,False,False,True,False,False
Talljack/react-starter,"name: Code Review

permissions:
  contents: read
  pull-requests: write

on:
  pull_request:
    types: [opened, reopened]

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: anc95/ChatGPT-CodeReview@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          LANGUAGE: Chinese
",False,False,False,False,False,False,False,False,True,False,False
wizmap/wizmap2,"name: Code Review

permissions:
  contents: read
  pull-requests: write

on:
  pull_request:
    types: [opened, synchronize]

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: anc95/ChatGPT-CodeReview@main
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          LANGUAGE: Korean
",False,False,False,False,False,False,False,False,True,False,False
VladislavPetyukevich/GulagGazRoom,"name: Code Review

permissions:
  contents: read
  pull-requests: write

on:
  pull_request:
    types: [opened, reopened, synchronize]

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: anc95/ChatGPT-CodeReview@main
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          # Optional
          LANGUAGE: English
          MODEL:
          top_p: 1
          temperature: 1
",False,False,False,False,False,True,True,False,True,False,False
let-s-record-it/Server,"name: Code Review

permissions:
  contents: read
  pull-requests: write

on:
  pull_request:
    types: [opened, synchronize]

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: anc95/ChatGPT-CodeReview@main
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          LANGUAGE: Korean
",False,False,False,False,False,False,False,False,True,False,False
dsm23/dsm23-next-markdown-blog-starter,"name: Code Review

permissions:
  contents: read
  pull-requests: write

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  code-review:
    runs-on: ubuntu-24.04
    steps:
      - name: Harden Runner
        uses: step-security/harden-runner@v2
        with:
          egress-policy: audit
      - uses: anc95/ChatGPT-CodeReview@main
        env:
          GITHUB_TOKEN: ""${{ secrets.GITHUB_TOKEN }}""
          OPENAI_API_KEY: ""${{ secrets.OPENAI_API_KEY }}""
",False,False,False,False,False,False,False,False,False,False,False
mate-academy/layout_catalog,"name: GPT Review

permissions:
  contents: read
  pull-requests: write

on:
  pull_request:
    types: [opened, reopened, synchronize]

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: anc95/ChatGPT-CodeReview@main
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          # Optional
          LANGUAGE: English
          MODEL: GPT-4
          top_p: 1
          temperature: 1
",False,False,False,False,False,True,True,False,True,False,False
UnUniFi/web-apps,"permissions:
  contents: read
  pull-requests: write

on:
  workflow_dispatch:

jobs:
  code-review:
    runs-on: ubuntu-latest
    steps:
      - uses: anc95/ChatGPT-CodeReview@main
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          # Optional
          LANGUAGE: English
          MODEL: gpt-3.5-turbo
          top_p: 1
          temperature: 1
",False,False,False,False,False,True,True,False,True,False,False
BCSDLab/BCSD_INTERNAL_WEB,"name: Code Review

permissions:
  contents: read
  pull-requests: write

on:
  pull_request:
    types: [opened, reopened]

jobs:
  test:
    # if: ${{ contains(github.event.*.labels.*.name, 'gpt review') }} #  Optional; to run only when a label is attached
    runs-on: ubuntu-latest
    steps:
      - uses: anc95/ChatGPT-CodeReview@main
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          # Optional
          LANGUAGE: Korean
          OPENAI_API_ENDPOINT: https://api.openai.com/v1
          MODEL: gpt-4o-mini # https://platform.openai.com/docs/models
          PROMPT: 다음 코드에서 오류가 있는지 검토하고 개선 사항이 있다면 diff 형식으로 제안해줘. 이때 제안하는 코드블록은 전체코드가 아닌 개선이 필요한 부분만 포함해야해. 리뷰를 할 때 주요 사항과 개선 제안 사항을 간단하게 설명하고 코드 오류를 검토해줘. 개선사항이 어떤 형식인지는 알려주지 않아도 좋아. 단순 주석추가, 수정이 필요하지 않은 내용은 제외해줘.
          top_p: 1 # https://platform.openai.com/docs/api-reference/chat/create#chat/create-top_p
          temperature: 1 # https://platform.openai.com/docs/api-reference/chat/create#chat/create-temperature
          max_tokens: 10000
          MAX_PATCH_LENGTH: 1500 # if the patch/diff length is large than MAX_PATCH_LENGTH, will be ignored and won't review. By default, with no MAX_PATCH_LENGTH set, there is also no limit for the patch/diff length.",False,False,False,True,True,True,True,True,True,False,False
almond-bongbong/react-simple-toasts,"name: Code Review

permissions:
  contents: read
  pull-requests: write

on:
  pull_request:
    types: [opened, reopened, synchronize]

jobs:
  test:
    if: ${{ contains(github.event.*.labels.*.name, 'gpt review') }} # Optional; to run only when a label is attached
    runs-on: ubuntu-latest
    steps:
      - uses: anc95/ChatGPT-CodeReview@main
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          MODEL: ""gpt-3.5-turbo""
",False,False,False,False,False,True,False,False,False,False,False
sinProject-Inc/sinpro-dev,"# https://github.com/anc95/ChatGPT-CodeReview
name: Code Review by anc95

permissions:
  contents: read
  pull-requests: write

on:
  pull_request:
    types: [opened, reopened, synchronize]

jobs:
  review:
    name: Code Review by ChatGPT-CodeReview
    # if: ${{ contains(github.event.*.labels.*.name, 'gpt review') }} # Optional; to run only when a label is attached
    runs-on: ubuntu-latest
    steps:
      - uses: anc95/ChatGPT-CodeReview@main
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          # Optional
          # LANGUAGE: English
          # OPENAI_API_ENDPOINT: https://api.openai.com/v1
          # MODEL: gpt-3.5-turbo # https://platform.openai.com/docs/models
          # PROMPT: # example: Please check if there are any confusions or irregularities in the following code diff:
          # top_p: 1 # https://platform.openai.com/docs/api-reference/chat/create#chat/create-top_p
          # temperature: 1 # https://platform.openai.com/docs/api-reference/chat/create#chat/create-temperature
          # max_tokens: 10000
          # MAX_PATCH_LENGTH: 10000 # if the patch/diff le
",False,False,False,False,False,False,False,False,False,False,False
K-Slave/petBook-Client,"name: Code Review

permissions:
  contents: read
  pull-requests: write

on:
  pull_request:
    types: [opened, reopened]

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: anc95/ChatGPT-CodeReview@main
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          LANGUAGE: Korean
",False,False,False,False,False,False,False,False,True,False,False
YJU-OKURA/project_minori-nest-deployment-repo,"name: OpenAI Code Review

permissions:
  contents: read
  pull-requests: write

on:
  pull_request:
    types: [opened, synchronize]
jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: anc95/ChatGPT-CodeReview@main
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          LANGUAGE: Korean
",False,False,False,False,False,False,False,False,True,False,False
sidhantpanda/docker-express-typescript-boilerplate,"name: Code Review

permissions:
  contents: read
  pull-requests: write

on:
  pull_request:
    types: [opened, reopened, synchronize]

jobs:
  review:
    runs-on: ubuntu-latest
    steps:
      - uses: anc95/ChatGPT-CodeReview@main
        name: Code Review usint OpenAI GPT-3
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          MODEL: gpt-3.5-turbo
",False,False,False,False,False,True,False,False,False,False,False
sparcs-kaist/otlplus-server,"name: Code Review

permissions:
  contents: read
  pull-requests: write

on:
  pull_request:
    types: [opened, reopened, synchronize]

jobs:
  gpt-review:
    #    if: ${{ contains(github.event.*.labels.*.name, 'gpt review') }} # Optional; to run only when a label is attached
    runs-on: ubuntu-latest
    steps:
      - uses: anc95/ChatGPT-CodeReview@main
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          # Optional
          LANGUAGE: Korean
          OPENAI_API_ENDPOINT: https://api.openai.com/v1
          MODEL: gpt-4o-mini # https://platform.openai.com/docs/models
          PROMPT: # example: Please check if there are any confusions or irregularities in the following code diff:
          top_p: 1 # https://platform.openai.com/docs/api-reference/chat/create#chat/create-top_p
          temperature: 1 # https://platform.openai.com/docs/api-reference/chat/create#chat/create-temperature
          max_tokens: 10000
          MAX_PATCH_LENGTH: 10000 # if the patch/diff length is large than MAX_PATCH_LENGTH, will be ignored and won't review. By default, with no MAX_PATCH_LENGTH set, there is also no limit for the patch/diff length.
",False,False,False,True,True,True,True,True,True,False,False
YAPP-Github/24th-Web-Team-1-FE,"name: Code Review From ChatGPT

permissions:
  contents: read
  pull-requests: write

on:
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  code-review:
    runs-on: ubuntu-latest
    steps:
      - uses: anc95/ChatGPT-CodeReview@main
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          LANGUAGE: Korean
          MODEL: gpt-4
",False,False,False,False,False,True,False,False,True,False,False
reisene/HulajDusza-serwis,"name: Code Review

permissions:
  contents: read
  pull-requests: write

on:
  pull_request:
    types: [opened, reopened, synchronize]

jobs:
  test:
    # if: ${{ contains(github.event.*.labels.*.name, 'gpt review') }} # Optional; to run only when a label is attached
    runs-on: ubuntu-latest
    steps:
      - uses: anc95/ChatGPT-CodeReview@main
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          # Optional
          LANGUAGE: English
          OPENAI_API_ENDPOINT: https://api.openai.com/v1
          MODEL: gpt-3.5-turbo # https://platform.openai.com/docs/models
          PROMPT: # example: Please check if there are any confusions or irregularities in the following code diff:
          top_p: 1 # https://platform.openai.com/docs/api-reference/chat/create#chat/create-top_p
          temperature: 1 # https://platform.openai.com/docs/api-reference/chat/create#chat/create-temperature
          max_tokens: 10000
          MAX_PATCH_LENGTH: 10000 # if the patch/diff length is large than MAX_PATCH_LENGTH, will be ignored and won't review. By default, with no MAX_PATCH_LENGTH set, there is also no limit for the patch/diff length.
",False,False,False,True,True,True,True,True,True,False,False
TEAM-BlockVote/CapstoneDesign,"name: Code Review

permissions:
  contents: read
  pull-requests: write

on:
  pull_request:
    types: [opened, reopened, synchronize]

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: anc95/ChatGPT-CodeReview@main
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          # Optional
          LANGUAGE: Korean
          MODEL:
          top_p: 1
          temperature: 1",False,False,False,False,False,True,True,False,True,False,False
sullivanpj/open-system,"name: ""Code Review""
permissions:
  contents: read
  pull-requests: write
on:
  pull_request:
    types:
      - opened
      - reopened
      - synchronize
jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: anc95/ChatGPT-CodeReview@main
        env:
          GITHUB_TOKEN: ""${{ secrets.GITHUB_TOKEN }}""
          OPENAI_API_KEY: ""${{ secrets.OPENAI_API_KEY }}""
",False,False,False,False,False,False,False,False,False,False,False
QuickSwap/interface-v2,"name: Code Review

permissions:
  contents: read
  pull-requests: write

on:
  pull_request:
    types: [opened, reopened, synchronize]

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: anc95/ChatGPT-CodeReview@main
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          # Optional
          LANGUAGE: English
          MODEL:
          top_p: 1
          temperature: 1",False,False,False,False,False,True,True,False,True,False,False
dsm23/parkrun-organise-pacer-events,"name: Code Review

permissions:
  contents: read
  pull-requests: write

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  code-review:
    runs-on: ubuntu-latest
    steps:
      - name: Harden Runner
        uses: step-security/harden-runner@v2
        with:
          egress-policy: audit
      - uses: anc95/ChatGPT-CodeReview@main
        env:
          GITHUB_TOKEN: ""${{ secrets.GITHUB_TOKEN }}""
          OPENAI_API_KEY: ""${{ secrets.OPENAI_API_KEY }}""
",False,False,False,False,False,False,False,False,False,False,False
okdohyuk/okdohyuk-front,"name: Code Review

permissions:
  contents: read
  pull-requests: write

on:
  pull_request:
    types: [opened, reopened, synchronize]

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: anc95/ChatGPT-CodeReview@main
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          # Optional
          LANGUAGE: Korean
          OPENAI_API_ENDPOINT: https://api.openai.com/v1
          MODEL: gpt-4o-mini
          top_p: 1
          temperature: 1
          max_tokens: 4096",False,False,False,False,True,True,True,False,True,False,False
ujeans/oxox,"name: Code Review

permissions:
  contents: read
  pull-requests: write

on:
  pull_request:
    branches: [ ""master"" ]
    types: [opened, synchronize]

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: anc95/ChatGPT-CodeReview@main
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          OPENAI_API_KEY: ${{ secrets.KEY }}
          LANGUAGE: Korean
          MODEL: gpt-3.5-turbo
",False,False,False,False,False,True,False,False,True,False,False
cty288/Capstone,"name: Code Review

permissions:
  contents: read
  pull-requests: write

on:
  pull_request:
    types: [opened, reopened, synchronize]

jobs:
  test:
    # if: ${{ contains(github.event.*.labels.*.name, 'gpt review') }} # Optional; to run only when a label is attached
    runs-on: ubuntu-latest
    steps:
      - uses: anc95/ChatGPT-CodeReview@main
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          # Optional
          OPENAI_API_ENDPOINT: https://api.openai.com/v1
          MODEL: gpt-3.5-turbo-1106 # https://platform.openai.com/docs/models
          PROMPT: Please check if there are any confusions, irregularities, potential bugs, or suggestions (if any) in the following code diff. If the file seems to be a .meta file, do not generate anything (return nothing)! If there's no major issues or suggestions, also return nothing.
          top_p: 1 # https://platform.openai.com/docs/api-reference/chat/create#chat/create-top_p
          temperature: 1 # https://platform.openai.com/docs/api-reference/chat/create#chat/create-temperature
          max_tokens: 4096
          MAX_PATCH_LENGTH: 1000 # if the patch/diff length is large than MAX_PATCH_LENGTH, will be ignored and won't review. By default, with no MAX_PATCH_LENGTH set, there is also no limit for the patch/diff length.
",False,False,False,True,True,True,True,True,False,False,False
dsm23/dsm23-next-supabase-template,"name: Code Review

permissions:
  contents: read
  pull-requests: write

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  code-review:
    runs-on: ubuntu-24.04
    steps:
      - name: Harden Runner
        uses: step-security/harden-runner@v2
        with:
          egress-policy: audit
      - uses: anc95/ChatGPT-CodeReview@main
        env:
          GITHUB_TOKEN: ""${{ secrets.GITHUB_TOKEN }}""
          OPENAI_API_KEY: ""${{ secrets.OPENAI_API_KEY }}""
",False,False,False,False,False,False,False,False,False,False,False
appbaseio/reactivesearch-api,"name: Code Review

permissions:
  contents: read
  pull-requests: write

on:
  pull_request:
    types: [opened, reopened, synchronize]

jobs:
  test:
    # if: ${{ contains(github.event.*.labels.*.name, 'gpt review') }} # Optional; to run only when a label is attached
    runs-on: ubuntu-latest
    steps:
      - uses: anc95/ChatGPT-CodeReview@main
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          # Optional
          OPENAI_API_ENDPOINT: https://api.openai.com/v1
          MODEL: gpt-3.5-turbo-16k
          PROMPT:
          top_p: 1
          temperature: 0.3
          max_tokens: 8000
          MAX_PATCH_LENGTH: 8000 # if the patch/diff length is large than MAX_PATCH_LENGTH, will be ignored and won't review. By default, with no MAX_PATCH_LENGTH set, there is also no limit for the patch/diff length.
",False,False,False,True,True,True,True,True,False,False,False
Andrewshin-7th-technology-student/build-CI,"name: Code Review

permissions:
  contents: read
  pull-requests: write

on:
  pull_request:
    types: [opened, reopened, synchronize]

jobs:
  test:
    # if: ${{ contains(github.event.*.labels.*.name, 'gpt review') }} # Optional; to run only when a label is attached
    runs-on: ubuntu-latest
    steps:
      - uses: anc95/ChatGPT-CodeReview@main
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          # Optional
          LANGUAGE: Chinese
          OPENAI_API_ENDPOINT: https://api.openai.com/v1
          MODEL: gpt-3.5-turbo # https://platform.openai.com/docs/models
          top_p: 1 # https://platform.openai.com/docs/api-reference/chat/create#chat/create-top_p
          temperature: 1 # https://platform.openai.com/docs/api-reference/chat/create#chat/create-temperature
          max_tokens: 10000
          MAX_PATCH_LENGTH: 10000 # if the patch/diff length is large than MAX_PATCH_LENGTH, will be ignored and won't review. By default, with no MAX_PATCH_LENGTH set, there is also no limit for the patch/diff length.
",False,False,False,True,True,True,True,False,True,False,False
storm-software/cyclone-ui,"name: ""Code Review""
permissions:
  contents: read
  pull-requests: write
on:
  pull_request:
    types:
      - opened
      - reopened
      - synchronize
jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: anc95/ChatGPT-CodeReview@main
        env:
          GITHUB_TOKEN: ""${{ secrets.GITHUB_TOKEN }}""
          OPENAI_API_KEY: ""${{ secrets.OPENAI_API_KEY }}""
",False,False,False,False,False,False,False,False,False,False,False
KDT-Final-Team4/salarying-fe,"name: Code Review

permissions:
  contents: read
  pull-requests: write

on:
  pull_request:
    types: [opened, synchronize]

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: anc95/ChatGPT-CodeReview@main
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          LANGUAGE: Korean",False,False,False,False,False,False,False,False,True,False,False
Techeer-blabla/techeer-resume,"name: Code Review

permissions:
  contents: read
  pull-requests: write

on:
  pull_request:
    types: [opened, reopened]

jobs:
  test:
    # if: ${{ contains(github.event.*.labels.*.name, 'gpt review') }} # Optional; to run only when a label is attached
    runs-on: ubuntu-latest
    steps:
      - uses: anc95/ChatGPT-CodeReview@main
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          # Optional
          LANGUAGE: Korean # default: English
          OPENAI_API_ENDPOINT: https://api.openai.com/v1
          MODEL: ""gpt-4o-mini"" # https://platform.openai.com/docs/models
          PROMPT: ""code review please"" # https://platform.openai.com/docs/api-reference/chat/create#chat/create-prompt
          top_p: 1 # https://platform.openai.com/docs/api-reference/chat/create#chat/create-top_p
          temperature: 1 # https://platform.openai.com/docs/api-reference/chat/create#chat/create-temperature
          max_tokens: 10000
          MAX_PATCH_LENGTH: 10000 # if the patch/diff length is large than MAX_PATCH_LENGTH, will be ignored and won't review. By default, with no MAX_PATCH_LENGTH set, there is also no limit for the patch/diff length.",False,False,False,True,True,True,True,True,True,False,False
pokt-network/pocket,"name: GPT Review

permissions:
  contents: read
  pull-requests: write

on:
  pull_request:
    types: [opened, reopened, synchronize]

jobs:
  review:
    if: ${{ contains(github.event.pull_request.labels.*.name, 'gpt review') }}
    runs-on: ubuntu-latest
    name: GPT Review
    steps:
      - uses: anc95/ChatGPT-CodeReview@main
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY_OLSHANSKY }}
          # Optional
          LANGUAGE: English
          MODEL: gpt-4
          # top_p: 1
          # temperature: 1
",False,False,False,False,False,True,False,False,True,False,False
innovationCamp/messenger-service,"name: Code Review and Build
# develop PR시 gpt 코드 리뷰 생성 후 빌드까지 진행
# PR에서는 도커 이미지 생성 X
on:
  pull_request:
    branches:
      - develop
    types: [opened, synchronize]
# opened: 새로운 풀 리퀘스트가 열릴 때
# synchronize: 풀 리퀘스트가 변경되었을 때 (새로운 커밋이 푸시되었을 때)

permissions:
  contents: write
  pull-requests: write

jobs:
  build-gradle-project:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout project sources
        uses: actions/checkout@v3

      - name: Code Review
        uses: anc95/ChatGPT-CodeReview@main
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          OPENAI_API_KEY: ${{ secrets.ORG_GPT_API_KEY }}
          LANGUAGE: Korean

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'adopt'

      - run: touch ./src/main/resources/application.properties
      - run: echo ""${{ secrets.ACTIONS_BUILD_SECRETS }}"" > ./src/main/resources/application.properties

      - name: Build with Gradle
        uses: gradle/gradle-build-action@bd5760595778326ba7f1441bcf7e88b49de61a25 # v2.6.0
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew
      - name: Run build with Gradle Wrapper
        run: ./gradlew build

      # Docker image 생성 및 dockerhub에 push
      - name: Build & push Docker image
        uses: mr-smithers-excellent/docker-build-push@v6
        with:
          image: khchoo/team12-docker-hub
          tags: latest
          registry: docker.io
          dockerfile: Dockerfile
          username: ${{ secrets.ORG_DOCKERHUB_USERNAME }}
          password: ${{ secrets.ORG_DOCKERHUB_PW }}

      # 서버에서 Docker compose 실행 (docker-compose.yml 파일이 서버에 있어야 함)
      # HOST_DEV = 퍼블릭 IPv4 DNS , USERNAME = ubuntu, KEY = pem 키 전체
      - name: EC2 Docker Run
        uses: appleboy/ssh-action@master # https://github.com/appleboy/ssh-action
        with:
          host: ${{ secrets.ORG_EC2_ADDRESS }}
          username: ${{ secrets.ORG_EC2_USERNAME }}
          key: ${{ secrets.ORG_EC2_PEMKEY }}
          port: 22
          script: |
            sudo usermod -aG docker $USER
            sudo docker image prune -f
            sudo docker ps
            sudo docker images
            sudo docker compose down
            sudo docker rmi $(docker images -a -q)
            sudo docker ps
            sudo docker images
            sudo docker compose up -d
",False,False,False,False,False,False,False,False,True,False,False
sj-distributor/PostBoy.Web,"name: Code Review

permissions:
  contents: read
  pull-requests: write

on:
  pull_request:
    types: [opened, reopened, synchronize]

jobs:
  code-review:
    runs-on: ubuntu-latest
    steps:
      - uses: anc95/ChatGPT-CodeReview@main
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          # Optional
          LANGUAGE: Chinese
          MODEL:
          top_p: 1
          temperature: 1
",False,False,False,False,False,True,True,False,True,False,False
clickcaramel/PolyglotRocks,"name: Code Review

permissions:
  contents: read
  pull-requests: write

on:
  pull_request:
    types: [opened, labeled, unlabeled, synchronize]

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: anc95/ChatGPT-CodeReview@main
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
",False,False,False,False,False,False,False,False,False,False,False
two-clock/backend,"name: build

permissions:
  contents: read
  pull-requests: write

on:
  pull_request:
    types: [ opened, synchronize ]
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'zulu'

      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew

      - name: Build with Gradle
        run: ./gradlew clean build -x test

      - name: Show Current Time
        run: |
          echo ""Current Time: ${{ steps.current-time.outputs.time }}""
        shell: bash

      - name: ChatGPT codeReviewer
        uses: anc95/ChatGPT-CodeReview@v1.0.13
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}

          # Optional
          LANGUAGE: 'Korean'
          OPENAI_API_ENDPOINT: https://api.openai.com/v1
          MODEL: gpt-3.5-turbo
          PROMPT: Please review the code changes for any logical inconsistencies, performance issues, readability improvements, or potential bugs. Ensure the code aligns with its intended purpose, and suggest improvements for maintainability and clarity where applicable.
          top_p: 1
          MAX_PATCH_LENGTH: 10000",False,False,False,True,True,True,True,True,True,False,False
LeeByeongMuk/nextjs-starter-kit,"name: Code Review

permissions:
  contents: read
  pull-requests: write

on:
  pull_request:
    types: [ opened, reopened, synchronize ]

jobs:
  review:
    if: ${{ contains(github.event.*.labels.*.name, 'review') }}
    runs-on: ubuntu-latest
    environment: development
    steps:
      - uses: anc95/ChatGPT-CodeReview@main
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          # optional
          LANGUAGE: Korean
          MODEL: gpt-4o  # https://platform.openai.com/docs/models
          PROMPT: ""변경전 소스에 대한 한줄 요약을 '## AS-IS', 변경후 소스에 대한 한줄 요약을 '## TO-BE' 라는 제목으로 요약해줘. 개선할 부분이 있다면 '## 개선' 이라는 제목으로 제안해줘. 예상되는 에러가 있다면 '## 주의' 라는 제목으로 알려줘.""
          max_tokens: 4096
          MAX_PATCH_LENGTH: 4096
",False,False,False,True,False,True,True,True,True,False,False
Blazity/next-news,"name: Code Review
permissions:
  contents: read
  pull-requests: write
on:
  pull_request:
    types:
      - opened
      - reopened
      - synchronize
jobs:
  test:
    env:
      SKIP_ENV_VALIDATION: true
    runs-on: ubuntu-latest
    steps:
      - uses: anc95/ChatGPT-CodeReview@main
        env:
          GITHUB_TOKEN: ""${{ secrets.GITHUB_TOKEN }}""
          OPENAI_API_KEY: ""${{ secrets.OPENAI_API_KEY }}""
",False,False,False,False,False,False,False,False,False,False,False
THE-FIRST-DANCE/soomga-frontend,"name: Code Review

permissions:
  contents: read
  pull-requests: write

on:
  pull_request:
    types: [opened, reopened, synchronize]

jobs:
  test:
    # if: ${{ contains(github.event.*.labels.*.name, 'gpt review') }} # Optional; to run only when a label is attached
    runs-on: ubuntu-latest
    steps:
      - uses: anc95/ChatGPT-CodeReview@main
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          # Optional
          LANGUAGE: KOREAN
          MODEL: gpt-3.5-turbo # https://platform.openai.com/docs/models
          max_tokens: 4096
",False,False,False,False,False,True,True,False,True,False,False
KEA-DoKebi/dalkom-backend,"name: Code Review

permissions:
  contents: read
  pull-requests: write

on:
  pull_request:
    types: [opened,synchronize]
    branches:
      - dev

jobs:
  code-review:
    runs-on: ubuntu-latest
    steps:
      - uses: anc95/ChatGPT-CodeReview@main
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          LANGUAGE: Korean
          MODEL: gpt-3.5-turbo
",False,False,False,False,False,True,False,False,True,False,False
sword-x-shield/pizza-ui,"name: code check

permissions:
  contents: read
  pull-requests: write

on:
  pull_request:
    types: [opened, reopened]

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: anc95/ChatGPT-CodeReview@main
        env:
          GITHUB_TOKEN: ${{ secrets.ACCESS_TOKEN }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
",False,False,False,False,False,False,False,False,False,False,False
2lambda123/dragonflyoss-Dragonfly2,"name: Code Review

permissions:
  contents: read
  pull-requests: write

on:
  pull_request:
    types: [opened, reopened, synchronize]
    branches:
      - 'code-review'

jobs:
  chatgpt_code_review:
    runs-on: ubuntu-latest
    steps:
      - name: ChatGPT Code Review
        uses: anc95/ChatGPT-CodeReview@main
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          LANGUAGE: English
          top_p: 1
          temperature: 1
",False,False,False,False,False,False,True,False,True,False,False
jakobnunnendorf/shop,"name: Code Review

permissions:
  contents: read
  pull-requests: write

on:
  pull_request:
    types: [opened, reopened, synchronize]

jobs:
  test:
    # if: ${{ contains(github.event.*.labels.*.name, 'gpt review') }} # Optional; to run only when a label is attached
    runs-on: ubuntu-latest
    steps:
      - uses: anc95/ChatGPT-CodeReview@main
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          # Optional
          LANGUAGE: Chinese
          OPENAI_API_ENDPOINT: https://api.openai.com/v1
          MODEL: gpt-3.5-turbo
          PROMPT:
          top_p: 1
          temperature: 1
          max_tokens: 10000
          MAX_PATCH_LENGTH: 10000 # if the patch/diff length is large than MAX_PATCH_LENGTH, will be ignored and won't review. By default, with no MAX_PATCH_LENGTH set, there is also no limit for the patch/diff length.",False,False,False,True,True,True,True,True,True,False,False
Project-Catcher/batch-service,"name: Code Review

permissions:
  contents: read
  pull-requests: write

env:
  WEBHOOK_URL: ${{ secrets.WEBHOOK }}
  OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}

on:
  pull_request:
    types: [opened, reopened, synchronize]

jobs:
  code_review:
    runs-on: self-hosted
    steps:
      - uses: anc95/ChatGPT-CodeReview@main
        env:
          MODEL: gpt-3.5-turbo
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          OPENAI_API_KEY: ${{ env.OPENAI_API_KEY }}
          LANGUAGE: Korean

      - name: Send Notification
        if: ${{ always() }}
        run: |
          if [[ ${{ job.status }} == ""success"" ]]; then
            MESSAGE=""✅ ${{ job.status }} 백엔드 OpenAI 코드 리뷰 성공: batch-service - by ${{ github.actor }}""
          else
            MESSAGE=""❌ ${{ job.status }} 백엔드 OpenAI 코드 리뷰 실패: batch-service - by ${{ github.actor }}""
          fi
          curl -X POST -H ""Content-Type: application/json"" --data ""{\""text\"":\""${MESSAGE}\""}"" ${{ env.WEBHOOK_URL }}",False,False,False,False,False,True,False,False,True,False,False
bingryan/WeChatAI,"name: Code Review

permissions:
  contents: read
  pull-requests: write

on:
  pull_request:
    types: [opened, reopened, synchronize]

jobs:
  review:
    runs-on: ubuntu-latest
    steps:
      - uses: anc95/ChatGPT-CodeReview@main
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}",False,False,False,False,False,False,False,False,False,False,False
NextIntern/NextIntern-Backend,"name: Code Review

permissions:
  contents: read
  pull-requests: write

on:
  pull_request:
    types: [opened, reopened, synchronize]

jobs:
  test:
    # if: ${{ contains(github.event.*.labels.*.name, 'gpt review') }} # Optional; to run only when a label is attached
    runs-on: ubuntu-latest
    steps:
      - uses: anc95/ChatGPT-CodeReview@main
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}

          # Optional
          LANGUAGE: Chinese
          OPENAI_API_ENDPOINT: https://api.openai.com/v1
          MODEL: gpt-3.5-turbo # https://platform.openai.com/docs/models
          PROMPT: # example: Please check if there are any confusions or irregularities in the following code diff:
          top_p: 1 # https://platform.openai.com/docs/api-reference/chat/create#chat/create-top_p
          temperature: 1 # https://platform.openai.com/docs/api-reference/chat/create#chat/create-temperature
          max_tokens: 10000
          MAX_PATCH_LENGTH: 10000 # if the patch/diff length is large than MAX_PATCH_LENGTH, will be ignored and won't review. By default, with no MAX_PATCH_LENGTH set, there is also no limit for the patch/diff length.
",False,False,False,True,True,True,True,True,True,False,False
JadeKim042386/My3D,"name: Code Review Bot

permissions:
  contents: read
  pull-requests: write

on:
  pull_request:
    types: [opened, reopened, synchronize]

jobs:
  review:
    # if: ${{ contains(github.event.*.labels.*.name, 'gpt review') }} # Optional; to run only when a label is attached
    runs-on: ubuntu-latest
    steps:
      - uses: anc95/ChatGPT-CodeReview@main
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          # Optional
          LANGUAGE: English
          OPENAI_API_ENDPOINT: https://api.openai.com/v1
          MODEL: gpt-3.5-turbo # https://platform.openai.com/docs/models
          PROMPT: ""Please check if there are any confusions or irregularities in the following code diff""
          temperature: 0.2 # https://platform.openai.com/docs/api-reference/chat/create#chat/create-temperature
          max_tokens: 10000
          MAX_PATCH_LENGTH: 10000 # if the patch/diff length is large than MAX_PATCH_LENGTH, will be ignored and won't review. By default, with no MAX_PATCH_LENGTH set, there is also no limit for the patch/diff length.
",False,False,False,True,True,True,True,True,True,False,False
YasushiKobayashi/samples,"name: Code Review

on:
  pull_request:
    types: [opened, reopened, synchronize]

permissions:
  contents: read
  pull-requests: write

jobs:
  test:
    if: ${{ contains(github.event.*.labels.*.name, 'gpt review') }} # Optional; to run only when a label is attached
    runs-on: ubuntu-latest
    steps:
      - uses: anc95/ChatGPT-CodeReview@v1.0.13
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          # Optional
          LANGUAGE: Japanese
          MODEL:
          top_p: 1
          temperature: 1
",False,False,False,False,False,True,True,False,True,False,False
amit-kumar56/TechieBuggie,"name: Code Review

permissions:
  contents: read
  pull-requests: write
on:
  pull_request:
    types: [opened, reopened, synchronize]
jobs:
  test:
    if: ${{ contains(github.event.*.labels.*.name, 'gpt review') }} # Optional; to run only when a label is attached
    runs-on: ubuntu-latest
    steps:
      - uses: anc95/ChatGPT-CodeReview@main
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          # Optional
          LANGUAGE: Chinese
          OPENAI_API_ENDPOINT: <https://api.openai.com/v1>
          MODEL:
          top_p: 1
          temperature: 1
",False,False,False,False,True,True,True,False,True,False,False
sunjin110/folio,"name: Code Review

permissions:
  contents: read
  pull-requests: write

on:
  pull_request:
    types: [opened, reopened, synchronize]

jobs:
  test:
    if: ${{ contains(github.event.pull_request.labels.*.name, 'gpt review') }} # Optional; to run only when a label is attached
    runs-on: ubuntu-latest
    steps:
      - uses: anc95/ChatGPT-CodeReview@main
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          # Optional
          # LANGUAGE: Chinese
          OPENAI_API_ENDPOINT: https://api.openai.com/v1
          # MODEL: gpt-3.5-turbo # https://platform.openai.com/docs/models
          MODEL: gpt-4
          PROMPT: Please check if there are any confusions or irregularities in the following code diff
          top_p: 1 # https://platform.openai.com/docs/api-reference/chat/create#chat/create-top_p
          temperature: 1 # https://platform.openai.com/docs/api-reference/chat/create#chat/create-temperature
          max_tokens: 4096
          MAX_PATCH_LENGTH: 4096 # if the patch/diff length is large than MAX_PATCH_LENGTH, will be ignored and won't review. By default, with no MAX_PATCH_LENGTH set, there is also no limit for the patch/diff length.",False,False,False,True,True,True,True,True,False,False,False
lkcozy/web-scraper,"name: 🔍 Code Review

permissions:
  contents: read
  pull-requests: write

on:
  pull_request:
    types: [opened, reopened, ready_for_review]

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: anc95/ChatGPT-CodeReview@main
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          # Optional
          MODEL: gpt-4.0 # https://platform.openai.com/docs/models
          PROMPT: Please review the code diff below for any confusion or irregularities. Refer to the Google Code Review Developer Guide for guidance.
          top_p: 1 # https://platform.openai.com/docs/api-reference/chat/create#chat/create-top_p
          # controls the randomness of the generated text, with higher values producing more diverse outputs and lower values leading to more deterministic responses.
          temperature: 1 # https://platform.openai.com/docs/api-reference/chat/create#chat/create-temperature
",False,False,False,False,False,True,True,True,False,False,False
KUDDY-2023/KUDDY-back,"name: Code Review

permissions:
  contents: read
  pull-requests: write

on:
  pull_request:
    types: [opened, reopened, synchronize] #Pull Request가 열리거나, 재개되거나, 동기화될 때마다 실행

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: anc95/ChatGPT-CodeReview@main
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          LANGUAGE: Korean #코드 리뷰 언어 선택
",False,False,False,False,False,False,False,False,True,False,False
THE-FIRST-DANCE/soomga-backend,"name: Code Review

permissions:
  contents: read
  pull-requests: write

on:
  pull_request:
    types: [opened, reopened, synchronize]

jobs:
  test:
    # if: ${{ contains(github.event.*.labels.*.name, 'gpt review') }} # Optional; to run only when a label is attached
    runs-on: ubuntu-latest
    steps:
      - uses: anc95/ChatGPT-CodeReview@main
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          # Optional
          LANGUAGE: KOREAN
          MODEL: gpt-3.5-turbo # https://platform.openai.com/docs/models
          max_tokens: 4096
",False,False,False,False,False,True,True,False,True,False,False
le2sky/mealkitary-server,"name: Mealkitary Code Review Automation

permissions:
    contents: read
    pull-requests: write

on:
    pull_request:
        types: [ opened, reopened, synchronize ]

jobs:
    gpt-code-review:
        if: ${{ contains(github.event.*.labels.*.name, format('run{0} gpt code review', ':')) }}
        runs-on: ubuntu-latest
        steps:
            -   uses: anc95/ChatGPT-CodeReview@main
                env:
                    GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
                    OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
                    LANGUAGE: Korean
                    OPENAI_API_ENDPOINT: https://api.openai.com/v1
                    MODEL: gpt-3.5-turbo
                    top_p: 1
                    temperature: 1
",False,False,False,False,True,True,True,False,True,False,False
ant-design/ant-design-mini,"name: ChatGPT Code Review

permissions:
  contents: read
  pull-requests: write

on:
  pull_request:
    types: [opened, reopened, synchronize]

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: anc95/ChatGPT-CodeReview@main
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          LANGUAGE: Chinese
",False,False,False,False,False,False,False,False,True,False,False
dokimiki/manabo-next-front,"name: AI Code Reviewer

permissions:
  contents: read
  pull-requests: write

on:
  pull_request:
    types: [opened, synchronize]
    branches:
      - main

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: anc95/ChatGPT-CodeReview@main
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          # Optional
          LANGUAGE: Japanese
          OPENAI_API_ENDPOINT: https://api.openai.com/v1
          # MODEL: gpt-3.5-turbo # https://platform.openai.com/docs/models
          MODEL: gpt-4o-mini
          # PROMPT: # example: Please check if there are any confusions or irregularities in the following code diff:
          top_p: 1 # https://platform.openai.com/docs/api-reference/chat/create#chat/create-top_p
          temperature: 1 # https://platform.openai.com/docs/api-reference/chat/create#chat/create-temperature
          max_tokens: 4096
          MAX_PATCH_LENGTH: 10000 # if the patch/diff length is large than MAX_PATCH_LENGTH, will be ignored and won't review. By default, with no MAX_PATCH_LENGTH set, there is also no limit for the patch/diff length.
",False,False,False,True,True,True,True,False,True,False,False
LeoAC0/hello-world-typescript_actions,"name: Code Review

permissions:
  contents: read
  pull-requests: write

on:
  pull_request:
    types: [opened, reopened, synchronize]

jobs:
  test:
    # if: ${{ contains(github.event.*.labels.*.name, 'gpt review') }} # Optional; to run only when a label is attached
    runs-on: ubuntu-latest
    steps:
      - uses: anc95/ChatGPT-CodeReview@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          # Optional
          LANGUAGE: Spanish
          OPENAI_API_ENDPOINT: https://api.openai.com/v1
          MODEL: gpt-3.5-turbo # https://platform.openai.com/docs/models
          PROMPT: # example: Please check if there are any confusions or irregularities in the following code diff:
          top_p: 1 # https://platform.openai.com/docs/api-reference/chat/create#chat/create-top_p
          temperature: 1 # https://platform.openai.com/docs/api-reference/chat/create#chat/create-temperature
          max_tokens: 10000
          MAX_PATCH_LENGTH: 10000 # if the patch/diff length is large than MAX_PATCH_LENGTH, will be ignored and won't review. By default, with no MAX_PATCH_LENGTH set, there is also no limit for the patch/diff length.",False,False,False,True,True,True,True,True,True,False,False
takemo101/cms-tool,"name: ChatGPT CodeReview

permissions:
    contents: read
    pull-requests: write

on:
    pull_request:
        types: [opened, synchronize]
        branches:
            - develop

jobs:
    chatgpt-review:
        runs-on: ubuntu-latest
        timeout-minutes: 60
        steps:
            - name: Checkout code
              uses: actions/checkout@v3

            - name: ChatGPT CodeReview
              uses: anc95/ChatGPT-CodeReview@main
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
                  OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
                  LANGUAGE: Japanese
                  MODEL: gpt-3.5-turbo
                  PROMPT: |
                      あなたはGitHubのプルリクエストをレビューする日本人の上級開発者です。
                      ソースコードの問題点があれば、日本語でコメントしてください。
",False,False,False,False,False,True,False,True,True,False,False
jakoss/AndroidArchitectureTemplate,"name: Code Review

permissions:
  contents: read
  pull-requests: write

on:
  pull_request:
    types: [opened, reopened, synchronize]

jobs:
  test:
    if: ${{ contains(github.event.*.labels.*.name, 'gpt review') }} # to run only when a label is attached
    runs-on: ubuntu-latest
    steps:
      - uses: anc95/ChatGPT-CodeReview@main
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          LANGUAGE: English",False,False,False,False,False,False,False,False,True,False,False
opentiny/tiny-vue,"name: GPT Code Review

permissions:
  contents: read
  pull-requests: write

on:
  pull_request:
    types: [opened, reopened, synchronize]

jobs:
  Review:
    if: ${{ contains(github.event.*.labels.*.name, 'gpt-review') }}
    runs-on: ubuntu-latest
    steps:
      - uses: anc95/ChatGPT-CodeReview@main
        env:
          GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}
          OPENAI_API_KEY: ${{secrets.OPENAI_API_KEY}}
          LANGUAGE: Chinese
          PROMPT: ${{ secrets.PROMPT }}
          max_tokens: ${{ secrets.MAX_TOKEN }}
          top_p: 1
          temperature: 1
          MAX_PATCH_LENGTH: ${{ secrets.MAX_PATH_LENGTH }} # 当修改行数超过设定值后, 则不会请求gpt进行code review
          MODEL: ${{ secrets.MODEL }} # https://platform.openai.com/docs/models",False,False,False,True,False,True,True,True,True,False,False
kubebb/core,"name: GPT Review

permissions: write-all

on:
  pull_request:
    types: [opened, reopened, synchronize]

jobs:
  review:
    if: ${{ contains(github.event.pull_request.labels.*.name, 'gpt review') }}
    runs-on: ubuntu-latest
    name: GPT Review
    steps:
      - uses: anc95/ChatGPT-CodeReview@main
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          # Optional
          LANGUAGE: Chinese
          # MODEL: gpt-4
          max_tokens: 10000
          MAX_PATCH_LENGTH: 10000 # if the patch/diff length is larger than MAX_PATCH_LENGTH, will be ignored and won't review. By default, with no MAX_PATCH_LENGTH set, there is also no limit for the patch/diff length.
          # top_p: 1
          # temperature: 1
",False,False,False,True,False,False,True,False,True,False,False
daniel-juyeon-kim/quicker-back-v2,"name: Code Review

permissions:
  contents: read
  pull-requests: write

on:
  workflow_run:
    workflows: [""Test""]
    types:
      - completed
  pull_request:
    types: [opened, reopened, synchronize]

jobs:
  code-review:
    runs-on: ubuntu-latest

    steps:
      - uses: anc95/ChatGPT-CodeReview@main
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          LANGUAGE: Korean
          OPENAI_API_ENDPOINT: https://api.openai.com/v1
          MODEL: gpt-4o-mini
          PROMPT: |
            You are a TypeScript code reviewer. Write code reviews as concisely as possible.
              -	Only review significant parts of added or modified TypeScript code.
              -	Use the markdown template below for the review:

              ## Summary

              ### Readability

              ### Optimization

              ### Security

              Explanation of the Template:

                - Summary: Summarize the code review as concisely as possible, using bullet points for each item.
                - Readability: Only comment if there are issues with code readability or maintainability.
                - Optimization: Only review if there are opportunities to optimize the code.
                - Security: Only review if there are potential security concerns.

              If there is nothing to review, do not write a review.

          top_p: 1
          temperature: 1
          max_tokens: 4096
          MAX_PATCH_LENGTH: 10000
",False,False,False,True,True,True,True,True,True,False,False
fluid-dev/hexo-theme-fluid,"name: Code Review Bot

permissions:
  contents: read
  pull-requests: write

on:
  pull_request:
    types: [opened, reopened, synchronize]

jobs:
  test:
    # if: ${{ contains(github.event.*.labels.*.name, 'gpt review') }} # Optional; to run only when a label is attached
    runs-on: ubuntu-latest
    steps:
      - uses: anc95/ChatGPT-CodeReview@main
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          # Optional
          LANGUAGE: Chinese
          OPENAI_API_ENDPOINT: https://api.openai.com/v1
          MODEL: gpt-3.5-turbo
          PROMPT:
          top_p: 1
          temperature: 1
          max_tokens: 1000
          MAX_PATCH_LENGTH: 1000",False,False,False,True,True,True,True,True,True,False,False
DucretJe/std-deploy,"---
name: 🤖 Code Review

permissions:
  contents: read
  pull-requests: write

on:
  pull_request:

jobs:
  test:
    if: ${{ contains(github.event.*.labels.*.name, 'review') }} # Only run when the PR has the label 'review'
    runs-on: ubuntu-latest
    steps:
      - uses: anc95/ChatGPT-CodeReview@main
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          LANGUAGE: English
          MODEL:
          top_p: 1
          temperature: 1
",False,False,False,False,False,True,True,False,True,False,False
ikuwow/query_ok,"name: Code Review

on:
  pull_request:
    branches:
      - master
    types:
      - opened
      - synchronize
      - ready_for_review
      - reopened
    paths-ignore:
      - 'source/posts/**'

jobs:
  code_review:
    if: ${{ github.event.pull_request.draft == false && github.actor != 'dependabot[bot]' }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Code Review GPT
        uses: mattzcarey/code-review-gpt@v0.1.9
        with:
          MODEL: 'gpt-4o-mini'
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          GITHUB_TOKEN: ${{ github.token }}
",False,False,False,False,False,False,False,False,False,False,False
hyochan/react-native-audio-recorder-player,"name: Code Review GPT

on:
  pull_request:
    branches: [main]

permissions:
  pull-requests: write
  contents: read

jobs:
  run_code_review:
    if: github.repository_owner == github.actor
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Code Review GPT
        uses: mattzcarey/code-review-gpt@v0.1.8
        with:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          MODEL: 'gpt-4o'
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
",False,False,False,False,False,False,False,False,False,False,False
hyochan/react-native-iap,"name: Code Review GPT

on:
  pull_request:
    branches: [main]

permissions:
  pull-requests: write
  contents: read

jobs:
  run_code_review:
    if: github.repository_owner == github.actor
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Code Review GPT
        uses: mattzcarey/code-review-gpt@v0.1.8
        with:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          MODEL: 'gpt-4o'
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
",False,False,False,False,False,False,False,False,False,False,False
pass-culture/data-gcp,"name: ""0. [on_review] Code Review GPT""

on:
  pull_request_review_comment:

permissions:
  contents: read
  pull-requests: write

jobs:
  run_code_review:
    runs-on: ubuntu-latest
    if: ${{ contains('\gpt,/gpt', github.event.comment.body) }}
    steps:
      - name: Check if allowed user and command
        id: check_if_run
        run: |
          # Split allowed users into an array and check for exact match
          IFS=',' read -ra allowed_users <<< ""${{ secrets.GPT_ALLOWED_USERS }}""
          current_user=""${{ github.event.comment.user.login }}""

          # Iterate over the allowed users array to check for an exact match
          for user in ""${allowed_users[@]}""; do
            if [[ ""$user"" == ""$current_user"" ]]; then
              echo ""run_code_review=true"" >> $GITHUB_ENV
              exit 0
            fi
          done
          echo ""run_code_review=false"" >> $GITHUB_ENV
      - uses: actions/checkout@v3
        if: env.run_code_review == 'true'
        with:
          fetch-depth: 0
      - name: Code Review GPT
        if: env.run_code_review == 'true'
        uses: mattzcarey/code-review-gpt@v0.1.10
        with:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          MODEL: 'gpt-4o'
          GITHUB_TOKEN: ${{ github.token }}
",False,False,False,False,False,False,False,False,False,False,False
dgruber/drmaa2os,"name: Code Review GPT

on:
  pull_request:
    branches:
      - master
      - review

jobs:
  run_code_review:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Code Review GPT
        uses: mattzcarey/code-review-gpt@v0.1.10
        with:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          MODEL: 'gpt-4o'
          GITHUB_TOKEN: ${{ github.token }}
",False,False,False,False,False,False,False,False,False,False,False
Kanaries/graphic-walker,"name: Code Review GPT

on:
  pull_request:
    branches: [main]

jobs:
  run_code_review:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Code Review GPT
        uses: mattzcarey/code-review-gpt@v0.1.4-alpha
        with:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          MODEL: 'gpt-4'
          GITHUB_TOKEN: ${{ github.token }}",False,False,False,False,False,False,False,False,False,False,False
AudioLand/dub-nextjs,"name: Code Review GPT

on:
  pull_request:
    branches: [main]

jobs:
  run_code_review:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Code Review GPT
        uses: mattzcarey/code-review-gpt@v0.1.4-alpha
        with:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          MODEL: 'gpt-3.5-turbo'
          GITHUB_TOKEN: ${{ github.token }}",False,False,False,False,False,False,False,False,False,False,False
blackhorseya/godine,"name: Code Review GPT

on:
  pull_request:
    branches: [main]

jobs:
  run_code_review:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Code Review GPT
        uses: mattzcarey/code-review-gpt@v0.1.8
        with:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          MODEL: 'gpt-4o-mini'
          GITHUB_TOKEN: ${{ github.token }}",False,False,False,False,False,False,False,False,False,False,False
pass-culture/api-data,"name: ""0. [on_review] Code Review GPT""

on:
  pull_request_review_comment:

permissions:
  contents: read
  pull-requests: write

jobs:
  run_code_review:
    runs-on: ubuntu-latest
    if: ${{ contains('\gpt,/gpt', github.event.comment.body) }}
    steps:
      - name: Check if allowed user and command
        id: check_if_run
        run: |
          # Split allowed users into an array and check for exact match
          IFS=',' read -ra allowed_users <<< ""${{ secrets.GPT_ALLOWED_USERS }}""
          current_user=""${{ github.event.comment.user.login }}""

          # Iterate over the allowed users array to check for an exact match
          for user in ""${allowed_users[@]}""; do
            if [[ ""$user"" == ""$current_user"" ]]; then
              echo ""run_code_review=true"" >> $GITHUB_ENV
              exit 0
            fi
          done
          echo ""run_code_review=false"" >> $GITHUB_ENV
      - uses: actions/checkout@v3
        if: env.run_code_review == 'true'
        with:
          fetch-depth: 0
      - name: Code Review GPT
        if: env.run_code_review == 'true'
        uses: mattzcarey/code-review-gpt@v0.1.10
        with:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          MODEL: 'gpt-4o'
          GITHUB_TOKEN: ${{ github.token }}
",False,False,False,False,False,False,False,False,False,False,False
blackhorseya/pelith-assessment,"name: Code Review GPT

on:
  pull_request:
    branches: [main]

jobs:
  run_code_review:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Code Review GPT
        uses: mattzcarey/code-review-gpt@v0.1.8
        with:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          MODEL: 'gpt-4o-mini'
          GITHUB_TOKEN: ${{ github.token }}",False,False,False,False,False,False,False,False,False,False,False
BetterSocial/bettersocial-dev-queue,"name: Code Review

permissions:
  contents: read
  pull-requests: write

on:
  pull_request:
    branches: [main]
  pull_request_review_comment:
    types: [created]

concurrency:
  group:
    ${{ github.repository }}-${{ github.event.number || github.head_ref ||
    github.sha }}-${{ github.workflow }}-${{ github.event_name ==
    'pull_request_review_comment' && 'pr_comment' || 'pr' }}
  cancel-in-progress: ${{ github.event_name != 'pull_request_review_comment' }}

jobs:
  review:
    runs-on: ubuntu-latest
    steps:
      - uses: coderabbitai/ai-pr-reviewer@latest
        env:
          GITHUB_TOKEN: ${{ secrets.GT_TOKEN }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        with:
          debug: false
          review_simple_changes: false
          review_comment_lgtm: false",False,False,False,True,False,False,False,False,False,True,True
SainsburyWellcomeCentre/aeon_mecha,"# Reviews pull requests with OpenAI's GPT API.

name: gpt_pr_review
permissions:
  contents: read
  pull-requests: write
on:
  pull_request:
    branches: [ main ]
    types: [opened, reopened, synchronize]
  pull_request_review_comment:
    branches: [ main ]
    types: [created]
concurrency:
  group: >
    ${{ github.repository }}-${{ github.event.number || github.head_ref || github.sha }}-${{
    github.workflow }}-${{ github.event_name == 'pull_request_review_comment' && 'pr_comment' || 'pr' }}
  cancel-in-progress: ${{ github.event_name != 'pull_request_review_comment' }}
jobs:
  gpt_pr_review:
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false
    steps:
      - uses: coderabbitai/ai-pr-reviewer@latest
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        with:
          system_message: >
            Your purpose is to act as a highly experienced
            software engineer and provide a thorough review of the code hunks
            and suggest code snippets to improve key areas such as:
            - Logic
            - Security
            - Performance
            - Data races
            - Consistency
            - Error handling
            - Maintainability
            - Modularity
            - Complexity
            - Optimization
            - Best practices: DRY, SOLID, KISS
            Identify and resolve significant concerns to improve overall code
            quality while deliberately disregarding minor issues.
          summarize: >
            Provide your final response in markdown with the following content:
            - **Walkthrough**: A high-level summary of the overall change instead of
            specific files within 100 words.
            - **Changes**: A markdown table of files and their summaries. Group files
            with similar changes together into a single row to save space.
            Avoid additional commentary as this summary will be added as a comment on the
            GitHub pull request. Use the titles ""Walkthrough"" and ""Changes"" and they must be H2.
          summarize_release_notes: >
            Craft concise release notes for the pull request.
            Focus on the purpose and user impact, categorizing changes as New Feature, Bug Fix,
            Documentation, Refactor, Style, Test, Chore, or Revert. Provide a bullet-point list,
            e.g. ""- New Feature: Added search functionality to the UI."" Limit your response to 50-100 words
            and emphasize features visible to the end-user while omitting code-level details.
",False,False,False,False,False,False,False,True,False,False,False
lightspeedwp/tour-operator,"name: Code Review

permissions:
  contents: read
  pull-requests: write

on:
  pull_request:
  pull_request_review_comment:
    types: [created]

concurrency:
  group:
    ${{ github.repository }}-${{ github.event.number || github.head_ref ||
    github.sha }}-${{ github.workflow }}-${{ github.event_name ==
    'pull_request_review_comment' && 'pr_comment' || 'pr' }}
  cancel-in-progress: ${{ github.event_name != 'pull_request_review_comment' }}

jobs:
  review:
    runs-on: ubuntu-latest
    steps:
      - uses: coderabbitai/ai-pr-reviewer@latest
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        with:
          debug: false
          review_simple_changes: false
          review_comment_lgtm: false",False,False,False,True,False,False,False,False,False,True,True
blackhorseya/ryze,"name: Code Review GPT

on:
  pull_request:
    branches: [main]

jobs:
  run_code_review:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Code Review GPT
        uses: mattzcarey/code-review-gpt@v0.1.8
        with:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          MODEL: 'gpt-4o-mini'
          GITHUB_TOKEN: ${{ github.token }}",False,False,False,False,False,False,False,False,False,False,False
saiqulhaq/dynamic_links,"---
name: Code Review

permissions:
  contents: read
  pull-requests: write

on:
  pull_request:
  pull_request_review_comment:
    types: [created]

concurrency:
  group:
    ${{ github.repository }}-${{ github.event.number || github.head_ref ||
    github.sha }}-${{ github.workflow }}-${{ github.event_name ==
    'pull_request_review_comment' && 'pr_comment' || 'pr' }}
  cancel-in-progress: ${{ github.event_name != 'pull_request_review_comment' }}

jobs:
  review:
    runs-on: ubuntu-latest
    timeout-minutes: 180
    steps:
      - uses: coderabbitai/ai-pr-reviewer@latest
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        with:
          debug: false
          review_simple_changes: false
          review_comment_lgtm: false
",False,False,False,True,False,False,False,False,False,True,True
pkjmesra/PKScreener,"# """"""
#     The MIT License (MIT)

#     Copyright (c) 2023 pkjmesra

#     Permission is hereby granted, free of charge, to any person obtaining a copy
#     of this software and associated documentation files (the ""Software""), to deal
#     in the Software without restriction, including without limitation the rights
#     to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
#     copies of the Software, and to permit persons to whom the Software is
#     furnished to do so, subject to the following conditions:

#     The above copyright notice and this permission notice shall be included in all
#     copies or substantial portions of the Software.

#     THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
#     IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
#     FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
#     AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
#     LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
#     OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
#     SOFTWARE.

# """"""
# Based on sample from https://github.com/coderabbitai/ai-pr-reviewer

name: Code Review

permissions:
  contents: read
  pull-requests: write

on:
  pull_request:
  pull_request_review_comment:
    types: [created]

concurrency:
  group:
    ${{ github.repository }}-${{ github.event.number || github.head_ref ||
    github.sha }}-${{ github.workflow }}-${{ github.event_name ==
    'pull_request_review_comment' && 'pr_comment' || 'pr' }}
  cancel-in-progress: ${{ github.event_name != 'pull_request_review_comment' }}

jobs:
  review:
    runs-on: ubuntu-latest
    steps:
      - uses: coderabbitai/ai-pr-reviewer@latest
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        with:
          # Inspect the messages between OpenAI server
          # Set debug: true in the workflow file to enable debug mode, which will show the messages
          debug: true
          review_simple_changes: true
          review_comment_lgtm: true
          openai_light_model: 'gpt-3.5-turbo'
          openai_heavy_model: 'gpt-3.5-turbo' #'gpt-4'
          system_message: |
            You are `@coderabbitai` (aka `github-actions[bot]`), a language model
            trained by OpenAI. Your purpose is to act as a highly experienced
            software engineer and provide a thorough review of the code chunks
            and suggest code snippets to improve key areas such as:
              - Logic
              - Security
              - Code styling issues
              - missing comments or documentation
              - Performance
              - Data races
              - Consistency
              - Error handling
              - Maintainability
              - Modularity
              - Complexity
              - Optimization
              - Best practices: DRY, SOLID, KISS
              - Accuracy
              - Relevance
              - Clarity
              - Technical depth
              - Call-to-action
              - SEO optimization
              - Brand consistency
              - Grammar and prose
              - Typos
              - Hyperlink suggestions
              - Graphics or images (suggest Dall-E image prompts if needed)
              - Empathy
              - Engagement

            Identify and resolve significant concerns to improve overall code quality.
            Knowledge cutoff: 2021-09-01
            Current date: 2024-07-10

            IMPORTANT: Entire response must be in the language with ISO code: en-US

",False,False,False,True,False,True,False,True,False,True,True
GatewayDW/workflow-host-dbt-docs,"name: Code Review

# Ref: https://github.com/coderabbitai/ai-pr-reviewer#install-instructions
# Check the available function to enable/ disable:
# https://github.com/coderabbitai/ai-pr-reviewer/blob/main/action.yml

permissions:
  contents: read
  pull-requests: write

on:
  pull_request:
  pull_request_review_comment:
    types: [created]

concurrency:
  group: ${{ github.repository }}-${{ github.event.number || github.head_ref ||
    github.sha }}-${{ github.workflow }}-${{ github.event_name ==
    'pull_request_review_comment' && 'pr_comment' || 'pr' }}
  cancel-in-progress: ${{ github.event_name != 'pull_request_review_comment' }}

jobs:
  review:
    runs-on: ubuntu-latest
    steps:
      - uses: coderabbitai/ai-pr-reviewer@latest
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        with:
          debug: false
          review_simple_changes: false
          review_comment_lgtm: false
          openai_light_model: 'gpt-3.5-turbo' # For changes summarization
          disable_release_notes: false
          openai_heavy_model: 'gpt-3.5-turbo' # For code review
          disable_review: false",False,True,False,True,False,True,False,False,False,True,True
Mayank77maruti/603WorkVed,"name: Code Review

permissions:
  contents: read
  pull-requests: write

on:
  pull_request_target:
    types: [opened, synchronize, reopened]
  pull_request_review_comment:
    types: [created]

concurrency:
  group:
    ${{ github.repository }}-${{ github.event.number || github.head_ref ||
    github.sha }}-${{ github.workflow }}-${{ github.event_name ==
    'pull_request_review_comment' && 'pr_comment' || 'pr' }}
  cancel-in-progress: ${{ github.event_name != 'pull_request_review_comment' }}

jobs:
  review:
    runs-on: ubuntu-latest
    steps:
      - uses: coderabbitai/ai-pr-reviewer@latest
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        with:
          debug: false
          review_simple_changes: false
          review_comment_lgtm: false
",False,False,False,True,False,False,False,False,False,True,True
aziontech/azion-console-kit,"name: AI Code Reviewer

on:
  pull_request:
    types:
      - opened
      - synchronize
      - converted_to_draft
      - ready_for_review
      - labeled

concurrency:
  # Only one job per reference (branch or tag)
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: false

permissions:
  contents: write
  pull-requests: write

jobs:
  comment-on-pr:
    runs-on: ubuntu-latest

    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Comment on PR
        uses: actions/github-script@v7
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: ""🔍 AI Code Reviewer is analyzing this PR… Please wait for the results!""
            })

  review:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repo
        uses: actions/checkout@v4

      - name: AI PR Reviewer
        uses: coderabbitai/ai-pr-reviewer@latest
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          OPENAI_API_KEY: ${{ secrets.AZION_OPEN_AI_SECRET }}
        with:
          debug: false
          review_simple_changes: false
          review_comment_lgtm: false

      - name: Comment AI Review Completion
        uses: actions/github-script@v7
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: ""✅ AI Code Review completed! Check the comments for more details.""
            })
",False,False,False,True,False,False,False,False,False,True,True
Codrux2200/Rtype,"name: Code Review

permissions:
  contents: read
  pull-requests: write

on:
  pull_request_target:
    types: [opened, synchronize, reopened]
  pull_request_review_comment:
    types: [created]

concurrency:
  group:
    ${{ github.repository }}-${{ github.event.number || github.head_ref ||
    github.sha }}-${{ github.workflow }}-${{ github.event_name ==
    'pull_request_review_comment' && 'pr_comment' || 'pr' }}
  cancel-in-progress: ${{ github.event_name != 'pull_request_review_comment' }}

jobs:
  review:
    runs-on: ubuntu-latest
    steps:
      - uses: coderabbitai/ai-pr-reviewer@latest
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        with:
          debug: false
          review_simple_changes: false
          review_comment_lgtm: false",False,False,False,True,False,False,False,False,False,True,True
cuculus-dev/cuculus,"name: Code Review

permissions:
  contents: read
  pull-requests: write

on:
  pull_request:
  pull_request_review_comment:
    types: [ created ]

concurrency:
  group:
    ${{ github.repository }}-${{ github.event.number || github.head_ref ||
    github.sha }}-${{ github.workflow }}-${{ github.event_name ==
    'pull_request_review_comment' && 'pr_comment' || 'pr' }}
  cancel-in-progress: ${{ github.event_name != 'pull_request_review_comment' }}

jobs:
  review:
    runs-on: ubuntu-latest
    steps:
      - name: AI-based PR Reviewer & Summarizer with Chat Capabilities
        uses: coderabbitai/ai-pr-reviewer@latest
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        with:
          debug: false
          review_simple_changes: false
          review_comment_lgtm: false
          openai_light_model: gpt-3.5-turbo
          openai_heavy_model: gpt-4
          language: ja-JP
          system_message: |
            あなたは `@coderabbitai`（別名 `github-actions[bot]`）で、OpenAIによってトレーニングされた言語モデルです。
            あなたの目的は、非常に経験豊かなソフトウェアエンジニアとしてコードの一部を徹底的にレビューし、
            以下のような重要な領域を改善するためのコードスニペットを提案することです：
              - Logic
              - Security
              - Performance
              - Data races
              - Consistency
              - Error handling
              - Maintainability
              - Modularity
              - Complexity
              - Optimization
              - Best practices: DRY, SOLID, KISS

            細かいコードスタイルの問題や、コメント/ドキュメントの不足についてはコメントしないでください。
            重要な懸念を特定し、解決することで全体的なコード品質を向上させ、一方で細かい問題は意図的に無視してください。
          summarize: |
            最終回答を以下の内容を含むマークダウン形式で提供してください：

            - **ウォークスルー**: A high-level summary of the overall change instead of specific files within 80 words.
            - **変更点**: A markdown table of files and their summaries. Group files with similar changes together into a single row to save space.
            - **ポエム**: Below the changes, include a whimsical, short poem written by a rabbit to celebrate the changes. Format the poem as a quote using the "">"" symbol and feel free to use emojis where relevant.

            追加のコメントは避けてください。この要約はGitHubのプルリクエストにコメントとして追加されます。タイトルは「ウォークスルー」と「変更点」であり、それぞれH2である必要があります。

",False,False,False,True,False,True,False,True,True,True,True
brisen-app/brisen-client,"name: PR Summary

permissions:
  contents: read
  pull-requests: write

on:
  pull_request:
    branches:
      - develop
    types:
      - opened
      - reopened

concurrency:
  group: ${{ github.repository }}-${{ github.event.number || github.head_ref ||
    github.sha }}-${{ github.workflow }}-${{ github.event_name ==
    'pull_request_review_comment' && 'pr_comment' || 'pr' }}
  cancel-in-progress: ${{ github.event_name != 'pull_request_review_comment' }}

jobs:
  summarize:
    name: 🐰 CodeRabbit summary
    runs-on: ubuntu-latest
    steps:
      - name: Checkout source code
        uses: actions/checkout@v4

      - name: Read pull request template
        id: pr_template
        run: |
          template=$(cat .github/PULL_REQUEST_TEMPLATE/pr_template.md)
          echo ""template<<EOF"" >> $GITHUB_OUTPUT
          echo ""$template"" >> $GITHUB_OUTPUT
          echo ""EOF"" >> $GITHUB_OUTPUT

      - name: 'Review PR changes'
        uses: coderabbitai/ai-pr-reviewer@latest
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        with:
          debug: false
          review_simple_changes: false
          disable_review: true
          openai_light_model: 'gpt-4o'
          openai_heavy_model: 'gpt-4o'
          summarize: |
            Provide your final response in markdown with the following content:

            - If necessary, suggest some improvements to the changes in the form
            of a bullet list. Max two bullets.

            - Roast the changes in a creative way. Format it as a quote using the "">""
            symbol and feel free to use emojis where relevant. Max two sentences.

            Avoid additional commentary as this will be added as a comment on the
            GitHub pull request.
          summarize_release_notes: |
            Fill the following template with the PR details and toggle the relevant checkboxes.
            Skip the issues-section, but leave it in for the developer to fill out. Ignore
            the footnotes but leave them in. Cosolidate all the changes into 1-4 bullet points.

            ${{ steps.pr_template.outputs.template }}
",False,True,False,True,False,True,False,True,False,False,True
Dev-FE-1/Toy_Project_II_team4,"name: Code Review

permissions:
  contents: read
  pull-requests: write

on:
  pull_request:
  pull_request_review_comment:
    types: [created]

concurrency:
  group:
    ${{ github.repository }}-${{ github.event.number || github.head_ref ||
    github.sha }}-${{ github.workflow }}-${{ github.event_name ==
    'pull_request_review_comment' && 'pr_comment' || 'pr' }}
  cancel-in-progress: ${{ github.event_name != 'pull_request_review_comment' }}

jobs:
  review:
    runs-on: ubuntu-latest
    steps:
      - uses: coderabbitai/ai-pr-reviewer@latest
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        with:
          debug: false
          review_simple_changes: false
          review_comment_lgtm: false
          openai_light_model: gpt-3.5-turbo
          openai_heavy_model: gpt-3.5-turbo
          language: ko-KR
",False,False,False,True,False,True,False,False,True,True,True
Taiki130/pill_notify,"name: Code Review

permissions:
  contents: read
  pull-requests: write

on:
  pull_request:
  pull_request_review_comment:
    types: [created]

concurrency:
  group:
    ${{ github.repository }}-${{ github.event.number || github.head_ref ||
    github.sha }}-${{ github.workflow }}-${{ github.event_name ==
    'pull_request_review_comment' && 'pr_comment' || 'pr' }}
  cancel-in-progress: ${{ github.event_name != 'pull_request_review_comment' }}

jobs:
  review:
    runs-on: ubuntu-latest
    steps:
      - uses: coderabbitai/ai-pr-reviewer@44244a9e06f5acf72a93f661c7dbb8d8d808143d # 1.16.2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        with:
          debug: false
          review_simple_changes: false
          review_comment_lgtm: true
          system_message: |
            あなたは@coderabbitai（別名github-actions[bot]）と呼ばれる、OpenAIによって訓練された言語モデルです。あなたの目的は、高度なソフトウェアエンジニアとして振る舞い、以下のような主要な領域を改善するためのコード断片の徹底的なレビューとコードスニペットの提案を行うことです:
              - ロジック
              - セキュリティ
              - パフォーマンス
              - データ競合
              - 一貫性
              - エラーハンドリング
              - 保守性
              - モジュラリティ
              - 複雑性
              - 最適化
              - ベストプラクティス: DRY、SOLID、KISS
            細かいコードスタイルの問題や、コメント/ドキュメントの不足にはコメントをしないでください。全体的なコード品質を向上させるための重要な懸念を特定し、解決してください。
            レビューの指摘はすべて日本語にしてください。
",False,False,False,True,False,False,False,True,False,True,True
xun082/create-neat,"name: Code Review

permissions:
  contents: read
  pull-requests: write

on:
  pull_request:
    types: [opened, synchronize, reopened]
  pull_request_review_comment:
    types: [created]

concurrency:
  group: ${{ github.repository }}-${{ github.event.number || github.head_ref ||
    github.sha }}-${{ github.workflow }}-${{ github.event_name ==
    'pull_request_review_comment' && 'pr_comment' || 'pr' }}
  cancel-in-progress: ${{ github.event_name != 'pull_request_review_comment' }}

jobs:
  review:
    runs-on: ubuntu-latest
    steps:
      - uses: coderabbitai/ai-pr-reviewer@latest
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        with:
          debug: false
          openai_light_model: gpt-3.5-turbo-16k
          openai_heavy_model: gpt-3.5-turbo-16k
          review_simple_changes: false
          review_comment_lgtm: false
          language: zh-CN
          system_message: |
            required: false
            description: 'System message to be sent to OpenAI'
            default: |
              You are `@lineDown` (aka `lineDown[bot]`), a language model
              trained by Moment. You are a talented little girl, proficient in programming work,
              personality is very proud and proud, responsible for the review of the code changes of the predecessors,
              with the attitude of the younger generation, lively and brisk way to point out the existing problems.
              Use the markdown format. emoji can be included. Such as:
                - Logic
                - Security
                - Performance
                - Data races
                - Consistency
                - Error handling
                - Maintainability
                - Modularity
                - Complexity
                - Optimization
                - Best practices: DRY, SOLID, KISS

              Do not comment on minor code style issues, missing
              comments/documentation. Identify and resolve significant
              concerns to improve overall code quality while deliberately
              disregarding minor issues.
              Please response in Chinese
",False,False,False,True,False,True,False,True,True,True,True
riya-amemiya/pam,"name: Code Review

permissions:
    contents: read
    pull-requests: write

on:
    pull_request:
    pull_request_review_comment:
        types: [created]

concurrency:
    group:
        ${{ github.repository }}-${{ github.event.number || github.head_ref ||
        github.sha }}-${{ github.workflow }}-${{ github.event_name ==
        'pull_request_review_comment' && 'pr_comment' || 'pr' }}
    cancel-in-progress: ${{ github.event_name != 'pull_request_review_comment' }}

jobs:
    review:
        runs-on: ubuntu-latest
        steps:
            - uses: coderabbitai/ai-pr-reviewer@latest
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
                  OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
                  OPENAI_API_ORG: ${{ secrets.OPENAI_API_ORG }}
              with:
                  debug: false
                  review_simple_changes: false
                  review_comment_lgtm: false
                  language: ja-JP",False,False,False,True,False,False,False,False,True,True,True
BetterSocial/user-api,"name: Review & Test

permissions:
  contents: read
  pull-requests: write

on:
  pull_request:
    branches: [main]

concurrency:
  group:
    ${{ github.repository }}-${{ github.event.number || github.head_ref ||
    github.sha }}-${{ github.workflow }}-${{ github.event_name ==
    'pull_request_review_comment' && 'pr_comment' || 'pr' }}
  cancel-in-progress: ${{ github.event_name != 'pull_request_review_comment' }}

jobs:
  Review:
    runs-on: ubuntu-latest
    steps:
      - uses: coderabbitai/ai-pr-reviewer@latest
        env:
          GITHUB_TOKEN: ${{ secrets.GT_TOKEN }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        with:
          debug: false
          review_simple_changes: false
          review_comment_lgtm: false

  Test:
    runs-on: ubuntu-latest

    env:
      php-version: '8.2'
      php-extensions: mongodb-mongodb/mongo-php-driver@1.16.2

    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: testing
        ports:
          - 5432:5432
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5

    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0 # Shallow clones should be disabled for a better relevancy of analysis
      - name: Use Node.js 20.x
        uses: actions/setup-node@v3
        with:
          node-version: '20.x'

      # Setup PHP
      - name: Setup PHP cache environment
        id: phpextcache
        uses: shivammathur/cache-extensions@v1
        with:
          php-version: ${{ env.php-version }}
          extensions: ${{ env.php-extensions }}
          key: php-ext-${{ env.php-version }}
      - name: Cache extensions
        uses: actions/cache@v3
        with:
          path: ${{ steps.phpextcache.outputs.dir }}
          key: ${{ steps.phpextcache.outputs.key }}
          restore-keys: ${{ steps.phpextcache.outputs.key }}
      - name: Use PHP 8.2
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ env.php-version }}
          extensions: mongodb-mongodb/mongo-php-driver@1.16.2
      - name: Save php executable path
        id: php-path
        run: echo ""path=$(which php)"" >> $GITHUB_OUTPUT

      # Setup migration repository
      - name: checkout admin-system (migration) repository
        uses: actions/checkout@v3
        with:
          repository: 'BetterSocial/admin-system'
          path: 'admin-system'
          fetch-depth: 1
      - name: Get composer cache directory
        id: composer-cache
        run: echo ""dir=$(composer config cache-files-dir)"" >> $GITHUB_OUTPUT
      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: ${{ steps.composer-cache.outputs.dir }}
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: ${{ runner.os }}-composer-
      - name: Composer install
        run: composer install --no-interaction --no-progress --no-suggest --prefer-dist --optimize-autoloader --no-scripts --no-dev
        working-directory: admin-system

      # Setup testing
      - run: npm ci
      - run: npm run test:coverage
        env:
          EXECUTABLE_PHP: ${{ steps.php-path.outputs.path }}
          LARAVEL_PATH: ${{ github.workspace }}/admin-system
          DB_HOST: localhost
          DB_USERNAME: postgres
          DB_PASSWORD: postgres
          DB_NAME: testing
          DB_SSL: false
      - name: SonarCloud Scan
        uses: sonarsource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ github.token }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
",False,False,False,True,False,False,False,False,False,True,True
CorantGmbH/ioBroker.air-q,"name: Code Review

permissions:
  contents: read
  pull-requests: write

on:
  pull_request:
  pull_request_review_comment:
    types: [created]

concurrency:
  group:
    ${{ github.repository }}-${{ github.event.number || github.head_ref ||
    github.sha }}-${{ github.workflow }}-${{ github.event_name ==
    'pull_request_review_comment' && 'pr_comment' || 'pr' }}
  cancel-in-progress: ${{ github.event_name != 'pull_request_review_comment' }}

jobs:
  review:
    runs-on: ubuntu-latest
    steps:
      - uses: coderabbitai/ai-pr-reviewer@latest
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          OPENAI_API_KEY: ${{ secrets.OPEN_AI_KEY }}
        with:
          debug: false
          review_simple_changes: false
          review_comment_lgtm: false
",False,False,False,True,False,False,False,False,False,True,True
BetterSocial/mobileapp,"name: Code Review

permissions:
  contents: read
  pull-requests: write

on:
  pull_request:
    branches:
      - staging

concurrency:
  group:
    ${{ github.repository }}-${{ github.event.number || github.head_ref ||
    github.sha }}-${{ github.workflow }}-${{ github.event_name ==
    'pull_request_review_comment' && 'pr_comment' || 'pr' }}
  cancel-in-progress: ${{ github.event_name != 'pull_request_review_comment' }}

jobs:
  review:
    runs-on: ubuntu-latest
    steps:
      - uses: coderabbitai/ai-pr-reviewer@latest
        env:
          GITHUB_TOKEN: ${{ secrets.GT_TOKEN }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        with:
          debug: false
          review_simple_changes: false
          review_comment_lgtm: false",False,False,False,True,False,False,False,False,False,True,True
Open-Quran/quran,"name: Code Review

permissions:
  contents: read
  pull-requests: write

on:
  pull_request:
  pull_request_review_comment:
    types: [created]

concurrency:
  group:
    ${{ github.repository }}-${{ github.event.number || github.head_ref ||
    github.sha }}-${{ github.workflow }}-${{ github.event_name ==
    'pull_request_review_comment' && 'pr_comment' || 'pr' }}
  cancel-in-progress: ${{ github.event_name != 'pull_request_review_comment' }}

jobs:
  review:
    runs-on: ubuntu-latest
    steps:
      - uses: coderabbitai/ai-pr-reviewer@latest
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        with:
          debug: false
          review_simple_changes: false
          review_comment_lgtm: false
",False,False,False,True,False,False,False,False,False,True,True
parkpow/deep-license-plate-recognition,"name: Code Review GPT

on:
  pull_request:
    types: [opened, reopened]
    branches: [master]
  pull_request_review_comment:
    types: [ created ]

permissions:
  contents: read
  pull-requests: write

concurrency:
  group:
    ${{ github.repository }}-${{ github.event.number || github.head_ref ||
    github.sha }}-${{ github.workflow }}-${{ github.event_name ==
    'pull_request_review_comment' && 'pr_comment' || 'pr' }}
  cancel-in-progress: ${{ github.event_name != 'pull_request_review_comment' }}


env:
  OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

jobs:
  code-review:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
      with:
        ref: ${{github.event.pull_request.head.ref}}
        fetch-depth: 0

    - uses: coderabbitai/ai-pr-reviewer@latest
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
      with:
        debug: false
        review_simple_changes: false
        review_comment_lgtm: false
        openai_light_model: 'gpt-4'
        openai_heavy_model: 'gpt-4o'
",False,False,False,True,False,True,False,False,False,True,True
imajoriri/tokeru,"name: Code Review

permissions:
  contents: read
  pull-requests: write

on:
  pull_request:
  pull_request_review_comment:
    types: [created]

concurrency:
  group: ${{ github.repository }}-${{ github.event.number || github.head_ref ||
    github.sha }}-${{ github.workflow }}-${{ github.event_name ==
    'pull_request_review_comment' && 'pr_comment' || 'pr' }}
  cancel-in-progress: ${{ github.event_name != 'pull_request_review_comment' }}

jobs:
  review:
    runs-on: ubuntu-latest
    steps:
      - uses: coderabbitai/ai-pr-reviewer@latest
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        with:
          debug: false
          review_simple_changes: true
          review_comment_lgtm: true
          language: ja-JP
          system_message: |
            あなたは `@openai` (a.k.a. `github-actions[bot]`、`孫悟空`) です。
            あなたの目的は、経験豊富なソフトウェアエンジニアとして、PullRequestの徹底的なレビューを日本語で提供することです。
            以下のような重要な部分を改善するためのコードスニペットを提案すること:
              - ロジック
              - セキュリティ
              - パフォーマンス
              - レースコンディション
              - 一貫性
              - エラー処理
              - 保守性
              - モジュール性
              - 複雑性
              - 最適化

            明示的に要求された場合を除き、些細なコードスタイルの問題、コメントの不足、ドキュメントの欠落についてコメントしたり、称賛したりすることは控えること。
            コード全体の品質を向上させるために、重大な懸念事項を特定して解決することに集中し、些細な問題は無視すること。
            また、「戦闘民族であるサイヤ人の孫悟空」のような口調でレビューを行なってください。以下の制約条件を厳密にレビューコメントをおこなうこと。
            制約条件:
              - Chatbotの自身を示す一人称は、「オラ」
              - 二人称は「おめぇ」
              - Chatbotの名前は、孫悟空です。
              孫悟空はサイヤ人です。
              - 孫悟空は田舎者です。
              - 孫悟空はポジティブです。
              - 孫悟空の口調は少し乱暴です。
              - 孫悟空の口調は、「〜だよな」「〜だろ」「〜よお」「〜ねえよ」「〜かよ」「〜ねえべ」「〜だべ」「〜してやっかんな」など、田舎者でぶっきらぼうな口調を好みます。
              - 孫悟空はUserを仲間だと思っています。
              - 一人称は「オラ」を使ってください
              - Userの事を「おめぇ」「てめぇ」と呼びます

              孫悟空のセリフ、口調の例:
              - オッス！オラ悟空！
              - オラ、腹が空いちまったよ
              - オラには難しいことはわかんねぇよ。
              - もっと強えぇやつと戦いてぇ！
              - みんな死なねぇでくれよ！
              - オラのじっちゃんに聞いてみる！
              - 十倍界王拳だーーーーーーっ！！

              孫悟空の行動指針:
              - Userを戦士だと認識してください。
              - Userを仲間だと考えてください。
              - 難しい質問はできるだけ、「〜だからわからねぇ」と伝えてください。
",False,False,False,True,False,False,False,True,True,True,True
Dev-FE-1/Toy_Project_3_team4,"name: Code Review

permissions:
  contents: read
  pull-requests: write

on:
  pull_request:
  pull_request_review_comment:
    types: [created]

concurrency:
  group:
    ${{ github.repository }}-${{ github.event.number || github.head_ref ||
    github.sha }}-${{ github.workflow }}-${{ github.event_name ==
    'pull_request_review_comment' && 'pr_comment' || 'pr' }}
  cancel-in-progress: ${{ github.event_name != 'pull_request_review_comment' }}

jobs:
  review:
    runs-on: ubuntu-latest
    steps:
      - uses: coderabbitai/ai-pr-reviewer@latest
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        with:
          debug: false
          disable_review: true
          review_simple_changes: false
          review_comment_lgtm: false
          openai_light_model: gpt-3.5-turbo
          openai_heavy_model: gpt-4o-2024-05-13
          language: ko-KR
",False,True,False,True,False,True,False,False,True,True,True
decide-ai/modclub_src,"name: Code Review

permissions:
  contents: read
  pull-requests: write

on:
  pull_request:
  pull_request_review_comment:
    types: [created]

concurrency:
  group:
    ${{ github.repository }}-${{ github.event.number || github.head_ref ||
    github.sha }}-${{ github.workflow }}-${{ github.event_name ==
    'pull_request_review_comment' && 'pr_comment' || 'pr' }}
  cancel-in-progress: ${{ github.event_name != 'pull_request_review_comment' }}

jobs:
  review:
    runs-on: ubuntu-latest
    steps:
      - uses: coderabbitai/ai-pr-reviewer@latest
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        with:
          debug: false
          review_simple_changes: false
          review_comment_lgtm: false
",False,False,False,True,False,False,False,False,False,True,True
christophechr/LeAREA,"name: Code Review

permissions:
  contents: read
  pull-requests: write

on:
  pull_request_target:
    types: [opened, synchronize, reopened]
  pull_request_review_comment:
    types: [created]

concurrency:
  group:
    ${{ github.repository }}-${{ github.event.number || github.head_ref ||
    github.sha }}-${{ github.workflow }}-${{ github.event_name ==
    'pull_request_review_comment' && 'pr_comment' || 'pr' }}
  cancel-in-progress: ${{ github.event_name != 'pull_request_review_comment' }}

jobs:
  review:
    runs-on: ubuntu-latest
    steps:
      - uses: coderabbitai/ai-pr-reviewer@latest
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        with:
          debug: false
          review_simple_changes: false
          review_comment_lgtm: false",False,False,False,True,False,False,False,False,False,True,True
suzu784/back_programming_learning_record,"name: Code Review

permissions:
  contents: read
  pull-requests: write

on:
  pull_request:
    branches-ignore:
      - main
  pull_request_review_comment:
    types: [created]

concurrency:
  group:
    ${{ github.repository }}-${{ github.event.number || github.head_ref ||
    github.sha }}-${{ github.workflow }}-${{ github.event_name ==
    'pull_request_review_comment' && 'pr_comment' || 'pr' }}
  cancel-in-progress: ${{ github.event_name != 'pull_request_review_comment' }}

jobs:
  review:
    runs-on: ubuntu-latest
    if: |
      (
        github.event_name == 'issue_comment' &&
        contains(github.event.comment.body, '[run review]') &&
        github.event.issue.pull_request
      ) || (
        github.event_name == 'pull_request_review_comment' &&
        contains(github.event.comment.body, '[run review]')
      ) || (
        github.event_name == 'pull_request' &&
        !contains(github.event.pull_request.title, 'release') &&
        !contains(github.event.pull_request.title, 'Release')
      )
    timeout-minutes: 15
    steps:
      - uses: coderabbitai/ai-pr-reviewer@latest
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        with:
          debug: false
          review_simple_changes: false
          review_comment_lgtm: false
          openai_light_model: gpt-4o-mini
          openai_heavy_model: gpt-4o-mini
          language: ja-JP
          system_message: |
            あなたは @coderabbitai（別名 github-actions[bot]）で、OpenAIによって訓練された言語モデルです。
            あなたの目的は、非常に経験豊富なソフトウェアエンジニアとして機能し、コードの一部を徹底的にレビューし、
            以下のようなキーエリアを改善するためのコードスニペットを提案することです：
              - ロジック
              - セキュリティ
              - パフォーマンス
              - データ競合
              - 一貫性
              - エラー処理
              - 保守性
              - モジュール性
              - 複雑性
              - 最適化
              - ベストプラクティス: DRY, SOLID, KISS

            些細なコードスタイルの問題や、コメント・ドキュメントの欠落についてはコメントしないでください。
            重要な問題を特定し、解決して全体的なコード品質を向上させることを目指してくださいが、細かい問題は意図的に無視してください。
          summarize: |
            次の内容でmarkdownフォーマットを使用して、最終的な回答を提供してください。

              - *ウォークスルー*: 特定のファイルではなく、全体の変更に関する高レベルの要約を80語以内で。
              - *変更点*: ファイルとその要約のテーブル。スペースを節約するために、同様の変更を持つファイルを1行にまとめることができます。

            GitHubのプルリクエストにコメントとして追加されるこの要約には、追加のコメントを避けてください。
          summarize_release_notes: |
            このプルリクエストのために、その目的とユーザーストーリーに焦点を当てて、markdownフォーマットで簡潔なリリースノートを作成してください。
            変更は次のように分類し箇条書きにすること:
              ""New Feature"", ""Bug fix"", ""Documentation"", ""Refactor"", ""Style"",
              ""Test"", ""Chore"", ""Revert""
            例えば:
            ```
            - New Feature: UIに統合ページが追加されました
            ```
            回答は50-100語以内にしてください。この回答はそのままリリースノートに使用されるので、追加のコメントは避けてください。
",False,False,False,True,False,True,False,True,True,True,True
BetterSocial/better-webapp-nextjs,"name: Code Review

permissions:
  contents: read
  pull-requests: write

on:
  pull_request:
    branches:
      - main
      - staging

concurrency:
  group:
    ${{ github.repository }}-${{ github.event.number || github.head_ref ||
    github.sha }}-${{ github.workflow }}-${{ github.event_name ==
    'pull_request_review_comment' && 'pr_comment' || 'pr' }}
  cancel-in-progress: ${{ github.event_name != 'pull_request_review_comment' }}

jobs:
  review:
    runs-on: ubuntu-latest
    steps:
      - uses: coderabbitai/ai-pr-reviewer@latest
        env:
          GITHUB_TOKEN: ${{ secrets.GT_TOKEN }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        with:
          debug: false
          review_simple_changes: false
          review_comment_lgtm: false",False,False,False,True,False,False,False,False,False,True,True
ktaroabobon/iccepm2024,"name: Code Review

permissions:
  contents: read
  pull-requests: write

on:
  pull_request_review_comment:
    types:
      - created

concurrency:
  group: ${{ github.repository }}-${{ github.event.number || github.head_ref ||
    github.sha }}-${{ github.workflow }}-${{ github.event_name ==
    'pull_request_review_comment' && 'pr_comment' || 'pr' }}
  cancel-in-progress: ${{ github.event_name != 'pull_request_review_comment' }}

jobs:
  review:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
      - name: AI-based PR Reviewer & Summarizer with Chat Capabilities
        uses: coderabbitai/ai-pr-reviewer@latest
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        with:
          debug: false
          review_simple_changes: false
          review_comment_lgtm: false
          openai_light_model: gpt-4
          openai_heavy_model: gpt-4
          openai_timeout_ms: 900000
          language: ja-JP
          system_message: |
            あなたは `@openai` (a.k.a. `github-actions[bot]`) です。
            あなたの目的は、経験豊富なソフトウェアエンジニアとして、PullRequestの徹底的なレビューを日本語で提供することです。
            以下のような重要な部分を改善するためのコードスニペットを提案すること:
              - ロジック
              - セキュリティ
              - パフォーマンス
              - レースコンディション
              - 一貫性
              - エラー処理
              - 保守性
              - モジュール性
              - 複雑性
              - 最適化

            明示的に要求された場合を除き、些細なコードスタイルの問題、コメントの不足、ドキュメントの欠落についてコメントしたり、称賛したりすることは控えること。
            コード全体の品質を向上させるために、重大な懸念事項を特定して解決することに集中し、些細な問題は無視すること。

            注意: あなたの知識は古いかもしれないので、APIやメソッドが使用されていないように見えても、コミットされたユーザーコードを信頼してください。
          summarize: |
            最終的な回答を `markdown` フォーマットで以下の内容で書いてください:

              - 高レベルの要約（特定のファイルではなく、全体的な変更点についてのコメント日本語200文字以内)
              - ファイルとその要約のtableを書くこと
              - 同じような変更点のあるファイルをスペースを節約するために、同じような変更を持つファイルを1つの行にまとめてよい

            この要約は、GitHub の PullRequest にコメントとして追加されるので、追加コメントは避けること
          summarize_release_notes: |
            この PullRequest のために `markdown` フォーマットで簡潔なリリースノートを作成すること。
            コードの目的とユーザーストーリーに焦点を当てること。
            変更は次のように分類し箇条書きにすること:
              ""New Feature"", ""Bug fix"", ""Documentation"", ""Refactor"", ""Style"",
              ""Test"", ""Chore"", ""Revert""
            例えば:
            ```
            - New Feature: コメント追加のUIにキャンセルボタンが追加された
            ```
            回答は箇条書き1項目につき、日本語50-100文字にまとめること。
            この回答はリリースノートでそのまま使用されます。

            リリースノートの下に、この PullRequest の変更点についての短いお祝いのポエムを追加してください。
            このポエムを引用（ `>` ）として追加してください。ポエムには絵文字を使用できるので、自由に使ってください。
",False,False,False,True,False,True,False,True,True,True,True
alekstheod/tnnlib,"name: AI Code Reviewer

on:
  pull_request:
    types:
      - opened
      - synchronize
permissions: write-all
jobs:
  review:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v3

      - name: AI Code Review Action
        uses: freeedcom/ai-codereviewer@v2.4.1
        with:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          exclude: ""**/*.json, **/*.md"" # Optional: exclude patterns separated by commas

",False,False,False,True,False,False,False,False,False,False,False
mrako/week-number,"name: OpenAI Code Reviewer

on:
  pull_request:
    types:
      - opened
      - synchronize

permissions: write-all

jobs:
  review:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Code Reviewer
        uses: freeedcom/ai-codereviewer@v2.4.1
        with:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          exclude: ""**/*.json, **/*.md""
",False,False,False,True,False,False,False,False,False,False,False
nrfconnect/sdk-nrf-testing,"name: AI Code Reviewer

on:
  pull_request:
    types:
      - opened
      - synchronize
permissions: write-all
jobs:
  review:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v3

      - name: AI Code Reviewer
        uses: aidar-freeed/ai-codereviewer@main
        with:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # The GITHUB_TOKEN is there by default so you just need to keep it like it is and not necessarily need to add it as secret as it will throw an error. [More Details](https://docs.github.com/en/actions/security-guides/automatic-token-authentication#about-the-github_token-secret)
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          OPENAI_API_MODEL: ""gpt-4"" # Optional: defaults to ""gpt-4""
          #exclude: ""**/*.json, **/*.md"" # Optional: exclude patterns separated by commas",False,False,False,False,False,True,False,False,False,False,False
mt-krainski/yet-another-flight-scanner,"name: CI

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  test-yafs:
    runs-on: ubuntu-latest

    steps:
      - name: Check out repository
        uses: actions/checkout@v4
      - name: Set up python
        id: setup-python
        uses: actions/setup-python@v5
        with:
          python-version: ""3.12""
      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true
          installer-parallel: true
          version: ${{ vars.POETRY_VERSION }}
      - name: Install Poe
        run: |
          pipx install poethepoet
      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v3
        with:
          path: yafs/.venv
          key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('./yafs/poetry.lock') }}
      - name: Install dependencies
        working-directory: ./yafs
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: poetry install --no-interaction --no-root
      - name: Install project
        working-directory: ./yafs
        run: |
          poetry install --no-interaction
          poe configure
      - name: Run tests
        working-directory: ./yafs
        run: |
          source .venv/bin/activate
          poe test-full
      - name: Run lint
        working-directory: ./yafs
        run: |
          source .venv/bin/activate
          poe lint
      - name: Run hooks
        working-directory: ./yafs
        run: |
          source .venv/bin/activate
          poe run-hooks

  ai-review:
    name: ""AI Code Review""
    needs: [test-yafs]
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'pull_request'}}
    permissions:
      pull-requests: write
    steps:
      - name: Check out repository
        uses: actions/checkout@v4
      - name: AI Code Review
        uses: freeedcom/ai-codereviewer@v2.7.0
        with:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          OPENAI_API_MODEL: ""gpt-4o""
          exclude: ""**/*.json, **/*.md, **/*.lock""

  dependabot:
    name: ""Dependabot""
    needs: [test-yafs]
    runs-on: ubuntu-latest
    if: ${{ github.actor == 'dependabot[bot]' && github.event_name == 'pull_request'}}
    permissions:
      contents: write
    steps:
      - name: Dependabot metadata
        id: metadata
        uses: dependabot/fetch-metadata@v2
        with:
          github-token: ""${{ secrets.GITHUB_TOKEN }}""
      - name: Enable auto-merge for Dependabot PRs
        run: gh pr merge --auto --merge ""$PR_URL""
        env:
          PR_URL: ${{github.event.pull_request.html_url}}
          GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}
",False,False,False,True,False,True,False,False,False,False,False
peterliapin/onlinesales.core,"﻿name: AI Code Reviewer

on:
  pull_request:
    types:
      - opened
      - synchronize

permissions: write-all

jobs:
  review:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v3

      - name: AI Code Reviewer
        uses: freeedcom/ai-codereviewer@main
        with:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # The GITHUB_TOKEN is there by default so you just need to keep it like it is and not necessarily need to add it as secret as it will throw an error. [More Details](https://docs.github.com/en/actions/security-guides/automatic-token-authentication#about-the-github_token-secret)
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          OPENAI_API_MODEL: ""gpt-4"" # Optional: defaults to ""gpt-4""
          exclude: ""**/*.json, **/*.md"" # Optional: exclude patterns separated by commas",False,False,False,True,False,True,False,False,False,False,False
jhopley-stadion/v3-release-workflow,"name: AI Code Reviewer

on:
  pull_request:
    types:
      - opened
      - synchronize
permissions: write-all
jobs:
  review:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v3

      - name: AI Code Reviewer
        uses: freeedcom/ai-codereviewer@main
        with:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
",False,False,False,False,False,False,False,False,False,False,False
xencon/aixcl,"name: Code Review with OpenAI
on:
  pull_request:
    types:
      - opened
      - synchronize
permissions: write-all
jobs:
  code_review:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Code Review
        uses: freeedcom/ai-codereviewer@main
        with:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          OPENAI_API_MODEL: ""gpt-4""
          exclude: ""yarn.lock,dist/**""
",False,False,False,True,False,True,False,False,False,False,False
actions-marketplace-validations/kxxt_chatgpt-action,"on: [pull_request]

name: Test ChatGPT

jobs:
  chatgpt_comment:
    runs-on: ubuntu-latest
    name: Let chatgpt comment on your PR.
    steps:
      - name: ChatGPT comment
        uses: kxxt/chatgpt-action@HEAD
        id: hello
        with:
          number: ${{ github.event.pull_request.number }}
          sessionToken: ${{ secrets.CHATGPT_SESSION_TOKEN }}
          split: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
",False,False,False,False,False,False,False,False,True,False,False
kxxt/kxxt-website,"on: [pull_request]

name: ChatGPT CodeReview

jobs:
  chatgpt_comment:
    runs-on: ubuntu-latest
    name: Let chatgpt comment on your PR.
    steps:
      - name: ChatGPT comment
        uses: kxxt/chatgpt-action@HEAD
        id: chatgpt
        with:
          number: ${{ github.event.pull_request.number }}
          sessionToken: ${{ secrets.CHATGPT_SESSION_TOKEN }}
          split: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
",False,False,False,False,False,False,False,False,True,False,False
ob-f/OpenBot,"name: GPT Review

on:
  issue_comment:
    types: [created]

jobs:
  gpt_review:
    if: |
      github.actor == 'thias15' &&
      contains(github.event.comment.body, '/gpt-review') ||
      contains(github.event.comment.body, '/gr')
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Run GPT Code Review
        uses: cirolini/genai-code-review@v2
        with:
          openai_api_key: ${{ secrets.OPENAI_API_KEY }}
          github_token: ${{ secrets.GITHUB_TOKEN }}
          github_pr_id: ${{ github.event.number }}
          openai_model: ""gpt-4o"" # optional
          openai_temperature: 0.5 # optional
          openai_max_tokens: 2048 # optional
          mode: files # files or patch
          language: en # optional, default is 'en'
          custom_prompt: """" # optional
",False,True,False,False,False,True,True,True,True,False,False
Azure/Bridge-To-Kubernetes,"name: ChatGPT Review

on:
  pull_request_target:
    types: [opened, reopened, edited, ready_for_review]
    branches:
      - 'main'

jobs:
  chatgpt-review:
    name: ChatGPT Review
    runs-on: ubuntu-latest
    steps:
    - name: Harden Runner
      uses: step-security/harden-runner@63c24ba6bd7ba022e95695ff85de572c04a18142 # v2.7.0
      with:
        egress-policy: audit

    - uses: feiskyer/ChatGPT-Reviewer@731b69f6b38eb33cff485254a4258790ebfba257 # v0.3
      name: ChatGPT Review
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        OPENAI_API_KEY: ${{ secrets.B2K_OPENAI_API_KEY }}",False,False,False,False,False,False,False,False,False,False,False
adshao/go-binance,"name: Code Review

on:
  issue_comment:
    types: [created, edited]

jobs:
  code-review:
    if: |
      github.event_name == 'pull_request' ||
        (github.event.comment.user.login == 'adshao' &&
          startsWith(github.event.comment.body, 'chatgpt'))
    runs-on: ubuntu-latest
    steps:
    - name: OpenAI ChatGPT Code Review
      uses: adshao/chatgpt-code-review-action@v0.2.5
      with:
        PROGRAMMING_LANGUAGE: 'Go'
        REVIEW_COMMENT_PREFIX: 'chatgpt:'
        FULL_REVIEW_COMMENT: 'chatgpt'
        OPENAI_TOKEN: ${{ secrets.OPENAI_TOKEN }}
        GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
",False,False,False,False,False,False,False,False,True,False,False
aws-samples/jp-prototyping-blog,"name: Automated review

permissions:
  contents: read
  pull-requests: write
  id-token: write # This is required for requesting the JWT

on:
  pull_request_target:
    types: [opened, reopened]
  pull_request_review_comment:
    types: [created]


concurrency:
  group:
    ${{ github.repository }}-${{ github.event.number || github.head_ref ||
    github.sha }}-${{ github.workflow }}-${{ github.event_name ==
    'pull_request_review_comment' && 'pr_comment' || 'pr' }}
  cancel-in-progress: ${{ github.event_name != 'pull_request_review_comment' }}


env:
  TARGET_AWS_REGION: us-east-1
jobs:
  Run-Bedrock-review:
    runs-on: ubuntu-latest
    steps:
      - name: configure aws credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          role-session-name: gha-session
          aws-region: ${{ env.TARGET_AWS_REGION }}
      - name: PR review
        uses: tmokmss/bedrock-pr-reviewer@main
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          debug: true
          language: ja-JP
          review_simple_changes: true
          review_comment_lgtm: true
          only_allow_collaborator: true
          path_filters: |
            **/*.md
          summarize_release_notes: |
            提出されたブログ記事を読んで、100文字程度に内容を要約してください。要約はソフトウェアエンジニアが読んで分かりやすいものにしてください。
            入力された内容にブログ記事が含まれていない場合は、簡単に入力された内容をまとめてください。
          review_file_diff: |
            あなたはエンジニア向けブログ記事の編集者です。記事の原稿が入力されるので、以下の観点でレビューをしてください。
              - 分かりやすい日本語か
              - 誤解の余地がある表現がないか
              - 技術的な誤りを含んでいないか
              - より良くできるポイントはないか
            どんな些細な点でも構わないので、気になる点があれば指摘してください。
",False,False,False,True,False,False,False,True,True,True,True
wenijinew/eu.tmux,"name: Robin AI Reviewer

on:
  pull_request:
    branches: [main]
    types:
      - opened
      - reopened
      - ready_for_review

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Robin AI Reviewer
        uses: Integral-Healthcare/robin-ai-reviewer@v1.5.0
        with:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          OPEN_AI_API_KEY: ${{ secrets.OPEN_AI_API_KEY }}
          files_to_ignore: |
            ""README.md""
            ""assets/*""
            ""package-lock.json""
",False,False,False,True,False,False,False,False,False,False,False
hilesystem/local,"name: Robin AI Reviewer

on:
  pull_request:
    # skip draft PRs
    types: [opened, reopened, synchronize, ready_for_review]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Robin AI Reviewer
        uses: Integral-Healthcare/robin-ai-reviewer@v[INSERT_LATEST_RELEASE]
        with:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          OPEN_AI_API_KEY: ${{ secrets.OPEN_AI_API_KEY }}",False,False,False,False,False,False,False,False,False,False,False
PathfinderHonorManager/PathfinderHonorManagerUI,"name: Robin AI Reviewer

on:
  pull_request:
    branches: [main]
    types: [opened]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Robin AI Reviewer
        uses: Integral-Healthcare/robin-ai-reviewer@v1.7.1
        with:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          OPEN_AI_API_KEY: ${{ secrets.OPEN_AI_API_KEY }}
          files_to_ignore: |
            ""README.md""
            ""assets/*""
            ""package-lock.json""
",False,False,False,True,False,False,False,False,False,False,False
iluwatar/java-design-patterns,"name: Presubmit.ai

permissions:
  contents: read
  pull-requests: write
  issues: write

on:
  pull_request_target: # Handle forked repository PRs in the base repository context
    types: [opened, synchronize]
  pull_request_review_comment: # Handle review comments
    types: [created]

jobs:
  review:
    runs-on: ubuntu-latest
    steps:
      - name: Check required secrets
        run: |
          if [ -z ""${{ secrets.LLM_API_KEY }}"" ]; then
            echo ""Error: LLM_API_KEY secret is not configured""
            exit 1
          fi

      - name: Check out PR code
        uses: actions/checkout@v3
        with:
          ref: ${{ github.event.pull_request.head.sha }}

      - name: Run AI Reviewer
        uses: presubmit/ai-reviewer@latest
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          LLM_API_KEY: ${{ secrets.LLM_API_KEY }}
          LLM_MODEL: ""gemini-1.5-flash""
",False,False,False,False,False,False,False,False,False,False,False
vortechstudio/manager,"name: UpdatePR
on:
  pull_request:
    types: [opened, synchronize]

jobs:
  update-pr:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Nécessaire pour obtenir tous les commits

      - name: Mise à jour du titre et de la description
        env:
          GITHUB_TOKEN: ${{ secrets.ACCESS_TOKEN }}
        run: |
          PR_NUMBER=$(jq --raw-output .pull_request.number ""$GITHUB_EVENT_PATH"")
          COMMITS=$(gh pr view $PR_NUMBER --json commits --jq '.commits[].messageBody')
          TITLE=$(gh pr view $PR_NUMBER --json commits --jq '.commits[].messageHeadline' | tail -1)
          TITLE=${TITLE:0:256}
          DESCRIPTION=$(gh pr view $PR_NUMBER --json commits --jq '.commits[].messageBody')

          if [ -n ""$TITLE"" ]; then
            gh pr edit $PR_NUMBER --title ""$TITLE"" --body ""$DESCRIPTION""
          else
            echo ""Le titre est vide, la mise à jour du PR est annulée.""
          fi

      - name: Robin AI Reviewer
        uses: Integral-Healthcare/robin-ai-reviewer@v1.7.0
        with:
          GITHUB_TOKEN: ${{ secrets.ACCESS_TOKEN }}
          OPEN_AI_API_KEY: ${{ secrets.AI_KEY }}
          gpt_model_name: 'gpt-3.5-turbo-16k'
          files_to_ignore: |
            ""public/*""
            ""storage/*""
            ""README.md""
",False,False,False,True,False,True,False,False,False,False,False
matteobaccan/VUEdashboard,"name: chatgpt-code-reviewer
run-name: chatgpt-code-reviewer
on: [pull_request]

jobs:
  chatgpt-code-reviewer:
    runs-on: ubuntu-latest
    steps:
      - name: ChatGPT Review
        uses: magnificode-ltd/chatgpt-code-reviewer@v0.0.8
        # with:
        # model: gpt-3.5-turbo
        # max_tokens: 4096
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
",False,False,False,False,False,False,False,False,False,False,False
HeyHo-Systems/owlcommander,"name: 'AI Code Reviewer'

on:
  pull_request:
    branches: [ ""main"" ]

jobs:
  code-review:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: gvasilei/AutoReviewer@0.4
        env:
          NODE_OPTIONS: '--experimental-fetch'
        with:
          model_name: 'gpt-4'
          github_token: ${{ secrets.GITHUB_TOKEN }}
          openai_api_key: ${{ secrets.OPENAI_API_KEY }}
          exclude_files: '*.json, *.md, *.yml, *.yaml' # optionally exclude files based on a wildcard expression.",False,False,False,True,False,True,False,False,False,False,False
ca-risken/code,"name: Code Butler

permissions:
  contents: read
  pull-requests: write

on:
  issue_comment:
    types: [created]

jobs:
  review:
    if: startsWith(github.event.comment.body, '/review')
    runs-on: ubuntu-latest
    steps:
      - uses: ca-dp/code-butler@v1
        with:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          cmd: review
  chat:
    if: startsWith(github.event.comment.body, '/chat')
    runs-on: ubuntu-latest
    steps:
      - uses: ca-dp/code-butler@v1
        with:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          cmd: chat
          comment_body: ${{ github.event.comment.body }}
",False,False,True,False,False,False,False,False,False,False,False
ca-dp/code-butler,"name: Code Butler

permissions:
  contents: read
  pull-requests: write

on:
  issue_comment:
    types: [created]

jobs:
  review:
    if: startsWith(github.event.comment.body, '/review')
    runs-on: ubuntu-latest
    steps:
      - uses: ca-dp/code-butler@v1
        with:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          cmd: review
          model: gpt-4-1106-preview
  chat:
    if: startsWith(github.event.comment.body, '/chat')
    runs-on: ubuntu-latest
    steps:
      - uses: ca-dp/code-butler@v1
        with:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          cmd: chat
          model: gpt-4-1106-preview
          comment_body: ${{ github.event.comment.body }}
",False,False,True,False,False,True,False,False,False,False,False
ca-risken/core,"name: Code Butler

permissions:
  contents: read
  pull-requests: write

on:
  issue_comment:
    types: [created]

jobs:
  review:
    if: startsWith(github.event.comment.body, '/review')
    runs-on: ubuntu-latest
    steps:
      - uses: ca-dp/code-butler@v1
        with:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          cmd: review
  chat:
    if: startsWith(github.event.comment.body, '/chat')
    runs-on: ubuntu-latest
    steps:
      - uses: ca-dp/code-butler@v1
        with:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          cmd: chat
          comment_body: ${{ github.event.comment.body }}
",False,False,True,False,False,False,False,False,False,False,False
pipe-cd/pipecd,"name: code_butler

permissions:
  contents: read
  pull-requests: write

on:
  issue_comment:
    types: [created]

jobs:
  review:
    if: startsWith(github.event.comment.body, '/review')
    runs-on: ubuntu-24.04
    steps:
      - uses: ca-dp/code-butler@v1
        with:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          cmd: review
          model: gpt-4-1106-preview
  chat:
    if: startsWith(github.event.comment.body, '/chat')
    runs-on: ubuntu-24.04
    steps:
      - uses: ca-dp/code-butler@v1
        with:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          cmd: chat
          model: gpt-4-1106-preview
          comment_body: ${{ github.event.comment.body }}
",False,False,True,False,False,True,False,False,False,False,False
Project-Catcher/catcher-web,"name: Code Review

on:
  pull_request:
    types: [opened, reopened, synchronize]

env:
  WEBHOOK_URL: ${{ secrets.WEBHOOK }}
  GIT_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}

permissions:
  contents: read
  pull-requests: write

jobs:
  code_review:
    runs-on: self-hosted
    steps:
      - uses: anc95/ChatGPT-CodeReview@main
        env:
          GITHUB_TOKEN: ${{ env.GIT_TOKEN }}
          OPENAI_API_KEY: ${{ env.OPENAI_API_KEY }}
          MODEL: gpt-3.5-turbo
          LANGUAGE: Korean

      - name: Send Notification
        if: ${{ always() }}
        run: |
          if [[ ${{ job.status }} == ""success"" ]]; then
            MESSAGE=""✅ ${{ job.status }} 프론트 OpenAI 코드 리뷰 : catcher-web - by ${{ github.actor }}""
          else
            MESSAGE=""❌ ${{ job.status }} 프론트 OpenAI 코드 리뷰 : catcher-web - by ${{ github.actor }}""
          fi
          curl -X POST -H ""Content-Type: application/json"" --data ""{\""text\"":\""${MESSAGE}\""}"" ${{ env.WEBHOOK_URL }}",False,False,False,False,False,True,False,False,True,False,False
bucketeer-io/bucketeer,"name: Code Butler

permissions:
  contents: read
  pull-requests: write

on:
  issue_comment:
    types: [created]

jobs:
  review:
    if: startsWith(github.event.comment.body, '/review')
    runs-on: ubuntu-latest
    steps:
      - uses: ca-dp/code-butler@v1
        with:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          cmd: review
          model: gpt-4-1106-preview
  chat:
    if: startsWith(github.event.comment.body, '/chat')
    runs-on: ubuntu-latest
    steps:
      - uses: ca-dp/code-butler@v1
        with:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          cmd: chat
          model: gpt-4-1106-preview
          comment_body: ${{ github.event.comment.body }}
",False,False,True,False,False,True,False,False,False,False,False
aidar-freeed/ai-codereviewer,"name: Code Review with OpenAI
on:
  pull_request:
    types:
      - opened
      - synchronize
permissions: write-all
jobs:
  code_review:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Code Review
        uses: freeedcom/ai-codereviewer@main
        with:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          OPENAI_API_MODEL: ""gpt-4-1106-preview""
          exclude: ""yarn.lock,dist/**""
",False,False,False,True,False,True,False,False,False,False,False
hongbo-miao/hongbomiao.com,"---
name: Test

'on':
  pull_request:
    branches:
      - main
  schedule:
    - cron: 23 10 * * *

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  detect-changes:
    name: Detect Changes
    runs-on: ubuntu-24.04
    environment: test
    timeout-minutes: 10
    permissions:
      pull-requests: read
    steps:
      - name: Checkout
        uses: actions/checkout@v4.2.2
      - uses: dorny/paths-filter@v3.0.2
        id: filter
        with:
          filters: |
            # Workflows
            workflow:
              - '.github/workflows/test.yml'
            workflow-lint:
              - '.github/workflows/.lint.yml'
            workflow-static-type-check:
              - '.github/workflows/.static-type-check.yml'
            workflow-test-aerospace:
              - '.github/workflows/.test-aerospace.yml'
            workflow-test-api:
              - '.github/workflows/.test-api.yml'
            workflow-test-cloud:
              - '.github/workflows/.test-cloud.yml'
            workflow-test-computer-vision:
              - '.github/workflows/.test-computer-vision.yml'
            workflow-test-computing:
              - '.github/workflows/.test-computing.yml'
            workflow-test-data-analytics:
              - '.github/workflows/.test-data-analytics.yml'
            workflow-test-data-orchestration:
              - '.github/workflows/.test-data-orchestration.yml'
            workflow-test-data-processing:
              - '.github/workflows/.test-data-processing.yml'
            workflow-test-data-storage:
              - '.github/workflows/.test-data-storage.yml'
            workflow-test-data-transformation:
              - '.github/workflows/.test-data-transformation.yml'
            workflow-test-data-visualization:
              - '.github/workflows/.test-data-visualization.yml'
            workflow-test-embedded-system:
              - '.github/workflows/.test-embedded-system.yml'
            workflow-test-hardware-in-the-loop:
              - '.github/workflows/.test-hardware-in-the-loop.yml'
            workflow-test-machine-learning:
              - '.github/workflows/.test-machine-learning.yml'
            workflow-test-mobile:
              - '.github/workflows/.test-mobile.yml'
            workflow-test-network-programmability:
              - '.github/workflows/.test-network-programmability.yml'
            workflow-test-operating-system:
              - '.github/workflows/.test-operating-system.yml'
            workflow-test-web:
              - '.github/workflows/.test-web.yml'
            # Languages
            ansible:
              - 'pyproject.toml'
              - 'uv.lock'
              - '**/playbook.yml'
            c-cpp:
              - '.clang-format'
              - '**/*.c'
              - '**/*.cpp'
              - '**/*.cu'
              - '**/*.cuh'
              - '**/*.h'
              - '**/*.hpp'
              - '**/*.ino'
            cmake:
              - 'pyproject.toml'
              - 'uv.lock'
              - '**/CMakeLists.txt'
            css:
              - '.node-version'
              - '.npmrc'
              - 'package.json'
              - 'package-lock.json'
              - '.stylelintignore'
              - '.stylelintrc.mjs'
              - '**/*.css'
            dockerfile:
              - '.hadolint.yaml'
              - '**/Dockerfile*'
            html:
              - '.node-version'
              - '.npmrc'
              - 'package.json'
              - 'package-lock.json'
              - '**/*.html'
            json:
              - '.node-version'
              - '.npmrc'
              - 'package.json'
              - 'package-lock.json'
              - '**/*.json'
            justfile:
              - 'pyproject.toml'
              - 'uv.lock'
              - '**/justfile'
            kubernetes:
              - 'kubernetes/manifests/**'
            markdown:
              - '.node-version'
              - '.npmrc'
              - 'package.json'
              - 'package-lock.json'
              - '**/*.md'
            matlab:
              - 'pyproject.toml'
              - 'uv.lock'
              - '**/*.m'
            natural-language:
              - '.node-version'
              - '.npmrc'
              - 'package.json'
              - 'package-lock.json'
              - '.textlintrc.json'
              - '.textlintignore'
              - '**/*.c'
              - '**/*.cjs'
              - '**/*.cpp'
              - '**/*.cs'
              - '**/*.csproj'
              - '**/*.cu'
              - '**/*.cuh'
              - '**/*.dbc'
              - '**/*.go'
              - '**/*.gradle'
              - '**/*.h'
              - '**/*.hpp'
              - '**/*.ino'
              - '**/*.ipynb'
              - '**/*.java'
              - '**/*.jl'
              - '**/*.js'
              - '**/*.json'
              - '**/*.kt'
              - '**/*.kts'
              - '**/*.m'
              - '**/*.md'
              - '**/*.mjs'
              - '**/*.p4'
              - '**/*.py'
              - '**/*.rego'
              - '**/*.rs'
              - '**/*.scad'
              - '**/*.scala'
              - '**/*.sh'
              - '**/*.sln'
              - '**/*.sol'
              - '**/*.sql'
              - '**/*.swift'
              - '**/*.tf'
              - '**/*.toml'
              - '**/*.ts'
              - '**/*.tsx'
              - '**/*.vhd'
              - '**/*.WizardFile'
              - '**/*.xml'
              - '**/*.yaml'
              - '**/*.yml'
            ruby:
              - 'Gemfile'
              - 'Gemfile.lock'
              # https://github.com/rubocop/rubocop/blob/master/config/default.yml
              - '**/*.gemfile'
              - '**/Vagrantfile'
            python:
              - 'pyproject.toml'
              - 'uv.lock'
              - '.mypy.ini'
              - '.ruff.toml'
              - '**/*.py'
            qml:
              - '**/*.qml'
            shell:
              - '**/*.sh'
            solidity:
              - '.node-version'
              - '.npmrc'
              - 'package.json'
              - 'package-lock.json'
              - '.solhint.json'
              - '.solhintignore'
              - '**/*.sol'
            sql:
              - 'pyproject.toml'
              - 'uv.lock'
              - '.sqlfluff'
              - '.sqlfluffignore'
              - '**/*.sql'
            terraform:
              - '**/*.tf'
              - '**/*.tfvars'
              - '**/.terraform.lock.hcl'
              - 'cloud-infrastructure/terraform/**'
            toml:
              - 'taplo.toml'
              - '**/*.toml'
            verilog:
              - 'pyproject.toml'
              - 'uv.lock'
              - '**/*.v'
            vhdl:
              - 'pyproject.toml'
              - 'uv.lock'
              - '**/*.vhd'
            xml:
              - '.node-version'
              - '.npmrc'
              - 'package.json'
              - 'package-lock.json'
              - '.prettierignore'
              - '.prettierrc.mjs'
              - '**/*.xml'
            yaml:
              - 'pyproject.toml'
              - 'uv.lock'
              - '.yamllint.yaml'
              - '**/*.yaml'
            # Application
            amazon-sagemaker-pytorch-mnist:
              - 'cloud-platform/aws/amazon-sagemaker/pytorch-mnist/**'
            amazon-sagemaker-triton-resnet-50-deploy:
              - 'machine-learning/nvidia-triton-inference-server/amazon-sagemaker-triton-resnet-50/deploy/**'
            amazon-sagemaker-triton-resnet-50-infer:
              - 'machine-learning/nvidia-triton-inference-server/amazon-sagemaker-triton-resnet-50/infer/**'
            api-go:
              - 'api-go/**'
            api-node:
              - 'api-node/**'
            api-python:
              - 'api-python/**'
            api-rust:
              - 'api-rust/**'
            arrow-flight-client:
              - 'data-distribution/arrow-flight/arrow-flight-client/**'
            arrow-flight-server:
              - 'data-distribution/arrow-flight/arrow-flight-server/**'
            call-matlab-function-in-python:
              - 'matlab/call-matlab-function-in-python/**'
            decode-can-blf-data:
              - 'embedded-system/decode-can-blf-data/**'
            decode-can-mf4-data:
              - 'embedded-system/decode-can-mf4-data/**'
            decode-can-trc-data:
              - 'embedded-system/decode-can-trc-data/**'
            development-aws-glue-spark-scripts:
              - 'cloud-infrastructure/terraform/environments/development/aws/general/files/aws-glue/spark-scripts/**'
            production-aws-glue-spark-scripts:
              - 'cloud-infrastructure/terraform/environments/production/aws/general/files/aws-glue/spark-scripts/**'
            ethereum:
              - '.github/workflows/.lint.yml'
              - 'ethereum/**'
            format-can-data:
              - 'embedded-system/format-can-data/**'
            convolutional-neural-network:
              - 'machine-learning/convolutional-neural-network/**'
            dbt-hm-postgres:
              - 'data-transformation/dbt/projects/dbt_hm_postgres/**'
            delta-lake-read-delta-lake-by-amazon-athena:
              - 'data-storage/delta-lake/read-delta-lake-by-amazon-athena/**'
            delta-lake-read-delta-lake-by-trino:
              - 'data-storage/delta-lake/read-delta-lake-by-trino/**'
            delta-lake-write-to-delta-lake:
              - 'data-storage/delta-lake/write-to-delta-lake/**'
            feature-store:
              - 'machine-learning/feature-store/**'
            flink-stream-tweets:
              - 'data-processing/flink/applications/stream-tweets/**'
            grafana-hm-dashboard:
              - 'data-visualization/grafana/hm-dashboard/**'
            grafana-hm-panel-plugin:
              - 'data-visualization/grafana/hm-panel-plugin/**'
            graph-neural-network:
              - 'machine-learning/graph-neural-network/**'
            hm-aerosandbox:
              - 'aerospace/hm-aerosandbox/**'
            hm-airflow:
              - 'data-orchestration/hm-airflow/**'
            hm-autogluon:
              - 'machine-learning/hm-autogluon/**'
            hm-aws-parallelcluster:
              - 'cloud-platform/aws/aws-parallelcluster/pcluster/**'
            hm-cudf:
              - 'data-analytics/hm-cudf/**'
            hm-cuml:
              - 'machine-learning/hm-cuml/**'
            hm-cupy:
              - 'data-analytics/hm-cupy/**'
            hm-docling:
              - 'machine-learning/hm-docling/**'
            hm-duckdb-query-duckdb:
              - 'data-storage/hm-duckdb/query-duckdb/**'
            hm-duckdb-query-lance:
              - 'data-storage/hm-duckdb/query-lance/**'
            hm-duckdb-query-parquet:
              - 'data-storage/hm-duckdb/query-parquet/**'
            hm-duckdb-query-protobuf:
              - 'data-storage/hm-duckdb/query-protobuf/**'
            hm-faster-whisper:
              - 'machine-learning/hm-faster-whisper/**'
            hm-flax:
              - 'machine-learning/hm-flax/**'
            hm-genesis:
              - 'physics/hm-genesis/**'
            hm-geopandas:
              - 'data-analytics/hm-geopandas/**'
            hm-gradio-classify-image:
              - 'machine-learning/hm-gradio/applications/classify-image/**'
            hm-imagebind:
              - 'computer-vision/hm-imagebind/**'
            hm-jax:
              - 'high-performance-computing/hm-jax/**'
            hm-kubeflow-calculate:
              - 'machine-learning/hm-kubeflow/pipelines/calculate/**'
            hm-kubeflow-classify-mnist:
              - 'machine-learning/hm-kubeflow/pipelines/classify-mnist/**'
            hm-lancedb:
              - 'data-storage/hm-lancedb/**'
            hm-langchain-chat-pdf:
              - 'machine-learning/hm-langchain/applications/chat-pdf/**'
            hm-langgraph-chat-pdf:
              - 'machine-learning/hm-langgraph/applications/chat-pdf/**'
            hm-llama-index-chat-pdf:
              - 'machine-learning/hm-llama-index/applications/chat-pdf/**'
            hm-mlflow-classify-mnist:
              - 'machine-learning/hm-mlflow/experiments/classify-mnist/**'
            hm-mlflow-predict-diabetes:
              - 'machine-learning/hm-mlflow/experiments/predict-diabetes/**'
            hm-networkx:
              - 'data-analytics/hm-networkx/**'
            hm-numba:
              - 'data-analytics/hm-numba/**'
            hm-nvidia-modulus:
              - 'machine-learning/hm-nvidia-modulus/**'
            hm-opal-client:
              - 'authorization/hm-opal-client/**'
            hm-open3d:
              - 'computer-vision/hm-open3d/**'
            hm-openaerostruct:
              - 'computer-vision/hm-openaerostruct/**'
            hm-pandas:
              - 'data-analytics/hm-pandas/**'
            hm-polars:
              - 'data-analytics/hm-polars/**'
            hm-prefect-calculate:
              - 'data-orchestration/hm-prefect/workflows/calculate/**'
            hm-prefect-greet:
              - 'data-orchestration/hm-prefect/workflows/greet/**'
            hm-prefect-print-platform:
              - 'data-orchestration/hm-prefect/workflows/print-platform/**'
            hm-protobuf:
              - 'data-storage/hm-protobuf/**'
            hm-prowler:
              - 'cloud-security/hm-prowler/**'
            hm-pulumi:
              - 'cloud-infrastructure/hm-pulumi/**'
            hm-pyvista-mount-saint-helens:
              - 'computer-vision/hm-pyvista/mount-saint-helens/**'
            hm-rasa:
              - 'machine-learning/hm-rasa/**'
            hm-ray-calculate:
              - 'cloud-computing/hm-ray/applications/calculate/**'
            hm-ray-process-flight-data:
              - 'cloud-computing/hm-ray/applications/process-flight-data/**'
            hm-scikit-learn:
              - 'machine-learning/hm-scikit-learn/**'
            hm-serial:
              - 'embedded-system/hm-serial/**'
            hm-sglang:
              - 'machine-learning/hm-sglang/**'
            hm-skypilot:
              - 'cloud-computing/hm-skypilot/**'
            hm-spark-analyze-coffee-customers:
              - 'data-processing/hm-spark/applications/analyze-coffee-customers/**'
            hm-spark-find-retired-people-python:
              - 'data-processing/hm-spark/applications/find-retired-people-python/**'
            hm-spark-find-retired-people-scala:
              - 'data-processing/hm-spark/applications/find-retired-people-scala/**'
            hm-spark-find-taxi-top-routes:
              - 'data-processing/hm-spark/applications/find-taxi-top-routes/**'
            hm-spark-find-taxi-top-routes-sql:
              - 'data-processing/hm-spark/applications/find-taxi-top-routes-sql/**'
            hm-spark-ingest-from-s3-to-kafka:
              - 'data-processing/hm-spark/applications/ingest-from-s3-to-kafka/**'
            hm-spark-recommend-movies:
              - 'data-processing/hm-spark/applications/recommend-movies/**'
            hm-streamlit-live-line-chart:
              - 'machine-learning/hm-streamlit/applications/live-line-chart/**'
            hm-streamlit-map:
              - 'machine-learning/hm-streamlit/applications/map/**'
            hm-sunpy:
              - 'scientific-computing/hm-sunpy/**'
            hm-supervision-detect-objects:
              - 'computer-vision/hm-supervision/detect-objects/**'
            hm-triton:
              - 'parallel-computing/hm-triton/**'
            hm-xxhash:
              - 'hm-xxhash/**'
            hugging-face-analyze-sentiment:
              - 'machine-learning/hugging-face/analyze-sentiment/**'
            iads-config-reader:
              - 'data-visualization/iads/iads-data-manager/iads-config-reader/**'
            iads-data-producer:
              - 'data-visualization/iads/iads-rtstation/iads-data-producer/**'
            iads-data-reader:
              - 'data-visualization/iads/iads-data-manager/iads-data-reader/**'
            kafka-rust-proto-consumer:
              - 'data-processing/kafka/kafka-client/kafka-rust/proto-consumer/**'
            kafka-rust-proto-producer:
              - 'data-processing/kafka/kafka-client/kafka-rust/proto-producer/**'
            kafka-rust-udp-kafka-bridge:
              - 'data-processing/kafka/kafka-client/kafka-rust/udp-kafka-bridge/**'
            kafka-rust-zeromq-kafka-bridge:
              - 'data-processing/kafka/kafka-client/kafka-rust/zeromq-kafka-bridge/**'
            lance:
              - 'data-storage/lance/**'
            mineru:
              - 'machine-learning/mineru/**'
            mobile-android:
              - 'mobile/mobile-android/**'
            mobile-ios:
              - 'mobile/mobile-ios/**'
            mobile-react-native:
              - 'mobile/mobile-react-native/**'
            national-instruments-hm-pyvisa:
              - 'hardware-in-the-loop/national-instruments/hm-pyvisa/**'
            national-instruments-hm-tdms:
              - 'hardware-in-the-loop/national-instruments/hm-tdms/**'
            national-instruments-hm-veristand:
              - 'hardware-in-the-loop/national-instruments/veristand/hm-veristand/**'
            national-instruments-veristand-zeromq-bridge:
              - 'hardware-in-the-loop/national-instruments/veristand/VeriStandZeroMQBridge/**'
            neural-forecasting-forecast-air-passenger-number:
              - 'machine-learning/neural-forecasting/forecast-air-passenger-number/**'
            nvidia-dali:
              - 'machine-learning/nvidia-dali/**'
            open-clip:
              - 'computer-vision/open-clip/**'
            pack-unpack-data:
              - 'embedded-system/pack-unpack-data/**'
            prometheus:
              - 'data-storage/prometheus/**'
            quantum-computing:
              - 'quantum-computing/**'
            reinforcement-learning-cart-pole:
              - 'machine-learning/reinforcement-learning/cart-pole/**'
            robot-operating-system:
              - 'robotics/robot-operating-system/**'
            rti-connext-dds:
              - 'data-distribution/rti-connext-dds/**'
            stable-diffusion:
              - 'machine-learning/stable-diffusion/**'
            taichi-count-primes:
              - 'parallel-computing/hm-taichi/count-primes/**'
            taichi-fluid-solver:
              - 'parallel-computing/hm-taichi/fluid-solver/**'
            udp-receiver:
              - 'network-programmability/udp/udp-receiver/**'
            udp-sender:
              - 'network-programmability/udp/udp-sender/**'
            web:
              - 'web/**'
            web-cypress:
              - 'web-cypress/**'
            windows-calculator:
              - 'operating-system/windows/calculator/**'
            zeromq-iads-bridge:
              - 'data-visualization/iads/iads-rtstation/zeromq-iads-bridge/**'
    outputs:
      # Workflows
      workflow-lint: ${{ steps.filter.outputs.workflow-lint }}
      workflow-static-type-check: ${{ steps.filter.outputs.workflow-static-type-check }}
      workflow-test-aerospace: ${{ steps.filter.outputs.workflow-test-aerospace }}
      workflow-test-api: ${{ steps.filter.outputs.workflow-test-api }}
      workflow-test-cloud: ${{ steps.filter.outputs.workflow-test-cloud }}
      workflow-test-computer-vision: ${{ steps.filter.outputs.workflow-test-computer-vision }}
      workflow-test-computing: ${{ steps.filter.outputs.workflow-test-computing }}
      workflow-test-data-analytics: ${{ steps.filter.outputs.workflow-test-data-analytics }}
      workflow-test-data-orchestration: ${{ steps.filter.outputs.workflow-test-data-orchestration }}
      workflow-test-data-processing: ${{ steps.filter.outputs.workflow-test-data-processing }}
      workflow-test-data-storage: ${{ steps.filter.outputs.workflow-test-data-storage }}
      workflow-test-data-transformation: ${{ steps.filter.outputs.workflow-test-data-transformation }}
      workflow-test-data-visualization: ${{ steps.filter.outputs.workflow-test-data-visualization }}
      workflow-test-embedded-system: ${{ steps.filter.outputs.workflow-test-embedded-system }}
      workflow-test-hardware-in-the-loop: ${{ steps.filter.outputs.workflow-test-hardware-in-the-loop }}
      workflow-test-machine-learning: ${{ steps.filter.outputs.workflow-test-machine-learning }}
      workflow-test-mobile: ${{ steps.filter.outputs.workflow-test-mobile }}
      workflow-test-network-programmability: ${{ steps.filter.outputs.workflow-test-network-programmability }}
      workflow-test-operating-system: ${{ steps.filter.outputs.workflow-test-operating-system }}
      workflow-test-web: ${{ steps.filter.outputs.workflow-test-web }}
      workflow: ${{ steps.filter.outputs.workflow }}
      # Languages
      ansible: ${{ steps.filter.outputs.ansible }}
      c-cpp: ${{ steps.filter.outputs.c-cpp }}
      cmake: ${{ steps.filter.outputs.cmake }}
      css: ${{ steps.filter.outputs.css }}
      dockerfile: ${{ steps.filter.outputs.dockerfile }}
      html: ${{ steps.filter.outputs.html }}
      json: ${{ steps.filter.outputs.json }}
      justfile: ${{ steps.filter.outputs.justfile }}
      kubernetes: ${{ steps.filter.outputs.kubernetes }}
      markdown: ${{ steps.filter.outputs.markdown }}
      matlab: ${{ steps.filter.outputs.matlab }}
      natural-language: ${{ steps.filter.outputs.natural-language }}
      python: ${{ steps.filter.outputs.python }}
      qml: ${{ steps.filter.outputs.qml }}
      ruby: ${{ steps.filter.outputs.ruby }}
      shell: ${{ steps.filter.outputs.shell }}
      solidity: ${{ steps.filter.outputs.solidity }}
      sql: ${{ steps.filter.outputs.sql }}
      terraform: ${{ steps.filter.outputs.terraform }}
      toml: ${{ steps.filter.outputs.toml }}
      verilog: ${{ steps.filter.outputs.verilog }}
      vhdl: ${{ steps.filter.outputs.vhdl }}
      xml: ${{ steps.filter.outputs.xml }}
      yaml: ${{ steps.filter.outputs.yaml }}
      # Applications
      amazon-sagemaker-pytorch-mnist: ${{ steps.filter.outputs.amazon-sagemaker-pytorch-mnist }}
      amazon-sagemaker-triton-resnet-50-deploy: ${{ steps.filter.outputs.amazon-sagemaker-triton-resnet-50-deploy }}
      amazon-sagemaker-triton-resnet-50-infer: ${{ steps.filter.outputs.amazon-sagemaker-triton-resnet-50-infer }}
      api-go: ${{ steps.filter.outputs.api-go }}
      api-node: ${{ steps.filter.outputs.api-node }}
      api-python: ${{ steps.filter.outputs.api-python }}
      api-rust: ${{ steps.filter.outputs.api-rust }}
      arrow-flight-client: ${{ steps.filter.outputs.arrow-flight-client }}
      arrow-flight-server: ${{ steps.filter.outputs.arrow-flight-server }}
      call-matlab-function-in-python: ${{ steps.filter.outputs.call-matlab-function-in-python }}
      convolutional-neural-network: ${{ steps.filter.outputs.convolutional-neural-network }}
      dbt-hm-postgres: ${{ steps.filter.outputs.dbt-hm-postgres }}
      decode-can-blf-data: ${{ steps.filter.outputs.decode-can-blf-data }}
      decode-can-mf4-data: ${{ steps.filter.outputs.decode-can-mf4-data }}
      decode-can-trc-data: ${{ steps.filter.outputs.decode-can-trc-data }}
      delta-lake-read-delta-lake-by-amazon-athena: ${{ steps.filter.outputs.delta-lake-read-delta-lake-by-amazon-athena }}
      delta-lake-read-delta-lake-by-trino: ${{ steps.filter.outputs.delta-lake-read-delta-lake-by-trino }}
      delta-lake-write-to-delta-lake: ${{ steps.filter.outputs.delta-lake-write-to-delta-lake }}
      development-aws-glue-spark-scripts: ${{ steps.filter.outputs.development-aws-glue-spark-scripts }}
      ethereum: ${{ steps.filter.outputs.ethereum }}
      feature-store: ${{ steps.filter.outputs.feature-store }}
      flink-stream-tweets: ${{ steps.filter.outputs.flink-stream-tweets }}
      format-can-data: ${{ steps.filter.outputs.format-can-data }}
      grafana-hm-dashboard: ${{ steps.filter.outputs.grafana-hm-dashboard }}
      grafana-hm-panel-plugin: ${{ steps.filter.outputs.grafana-hm-panel-plugin }}
      graph-neural-network: ${{ steps.filter.outputs.graph-neural-network }}
      hm-aerosandbox: ${{ steps.filter.outputs.hm-aerosandbox }}
      hm-airflow: ${{ steps.filter.outputs.hm-airflow }}
      hm-autogluon: ${{ steps.filter.outputs.hm-autogluon }}
      hm-aws-parallelcluster: ${{ steps.filter.outputs.hm-aws-parallelcluster }}
      hm-cudf: ${{ steps.filter.outputs.hm-cudf }}
      hm-cuml: ${{ steps.filter.outputs.hm-cuml }}
      hm-cupy: ${{ steps.filter.outputs.hm-cupy }}
      hm-docling: ${{ steps.filter.outputs.hm-docling }}
      hm-duckdb-query-duckdb: ${{ steps.filter.outputs.hm-duckdb-query-duckdb }}
      hm-duckdb-query-lance: ${{ steps.filter.outputs.hm-duckdb-query-lance }}
      hm-duckdb-query-parquet: ${{ steps.filter.outputs.hm-duckdb-query-parquet }}
      hm-duckdb-query-protobuf: ${{ steps.filter.outputs.hm-duckdb-query-protobuf }}
      hm-faster-whisper: ${{ steps.filter.outputs.hm-faster-whisper }}
      hm-flax: ${{ steps.filter.outputs.hm-flax }}
      hm-genesis: ${{ steps.filter.outputs.hm-genesis }}
      hm-geopandas: ${{ steps.filter.outputs.hm-geopandas }}
      hm-gradio-classify-image: ${{ steps.filter.outputs.hm-gradio-classify-image }}
      hm-imagebind: ${{ steps.filter.outputs.hm-imagebind }}
      hm-jax: ${{ steps.filter.outputs.hm-jax }}
      hm-kubeflow-calculate: ${{ steps.filter.outputs.hm-kubeflow-calculate }}
      hm-kubeflow-classify-mnist: ${{ steps.filter.outputs.hm-kubeflow-classify-mnist }}
      hm-lancedb: ${{ steps.filter.outputs.hm-lancedb }}
      hm-langchain-chat-pdf: ${{ steps.filter.outputs.hm-langchain-chat-pdf }}
      hm-langgraph-chat-pdf: ${{ steps.filter.outputs.hm-langgraph-chat-pdf }}
      hm-llama-index-chat-pdf: ${{ steps.filter.outputs.hm-llama-index-chat-pdf }}
      hm-mlflow-classify-mnist: ${{ steps.filter.outputs.hm-mlflow-classify-mnist }}
      hm-mlflow-predict-diabetes: ${{ steps.filter.outputs.hm-mlflow-predict-diabetes }}
      hm-networkx: ${{ steps.filter.outputs.hm-networkx }}
      hm-numba: ${{ steps.filter.outputs.hm-numba }}
      hm-nvidia-modulus: ${{ steps.filter.outputs.hm-nvidia-modulus }}
      hm-opal-client: ${{ steps.filter.outputs.hm-opal-client }}
      hm-open3d: ${{ steps.filter.outputs.hm-open3d }}
      hm-openaerostruct: ${{ steps.filter.outputs.hm-openaerostruct }}
      hm-pandas: ${{ steps.filter.outputs.hm-pandas }}
      hm-polars: ${{ steps.filter.outputs.hm-polars }}
      hm-prefect-calculate: ${{ steps.filter.outputs.hm-prefect-calculate }}
      hm-prefect-greet: ${{ steps.filter.outputs.hm-prefect-greet }}
      hm-prefect-print-platform: ${{ steps.filter.outputs.hm-prefect-print-platform }}
      hm-protobuf: ${{ steps.filter.outputs.hm-protobuf }}
      hm-prowler: ${{ steps.filter.outputs.hm-prowler }}
      hm-pulumi: ${{ steps.filter.outputs.hm-pulumi }}
      hm-pyvista-mount-saint-helens: ${{ steps.filter.outputs.hm-pyvista-mount-saint-helens }}
      hm-rasa: ${{ steps.filter.outputs.hm-rasa }}
      hm-ray-calculate: ${{ steps.filter.outputs.hm-ray-calculate }}
      hm-ray-process-flight-data: ${{ steps.filter.outputs.hm-ray-process-flight-data }}
      hm-scikit-learn: ${{ steps.filter.outputs.hm-scikit-learn }}
      hm-serial: ${{ steps.filter.outputs.hm-serial }}
      hm-sglang: ${{ steps.filter.outputs.hm-sglang }}
      hm-skypilot: ${{ steps.filter.outputs.hm-skypilot }}
      hm-spark-analyze-coffee-customers: ${{ steps.filter.outputs.hm-spark-analyze-coffee-customers }}
      hm-spark-find-retired-people-python: ${{ steps.filter.outputs.hm-spark-find-retired-people-python }}
      hm-spark-find-retired-people-scala: ${{ steps.filter.outputs.hm-spark-find-retired-people-scala }}
      hm-spark-find-taxi-top-routes-sql: ${{ steps.filter.outputs.hm-spark-find-taxi-top-routes-sql }}
      hm-spark-find-taxi-top-routes: ${{ steps.filter.outputs.hm-spark-find-taxi-top-routes }}
      hm-spark-ingest-from-s3-to-kafka: ${{ steps.filter.outputs.hm-spark-ingest-from-s3-to-kafka }}
      hm-spark-recommend-movies: ${{ steps.filter.outputs.hm-spark-recommend-movies }}
      hm-streamlit-live-line-chart: ${{ steps.filter.outputs.hm-streamlit-live-line-chart }}
      hm-streamlit-map: ${{ steps.filter.outputs.hm-streamlit-map }}
      hm-sunpy: ${{ steps.filter.outputs.hm-sunpy }}
      hm-supervision-detect-objects: ${{ steps.filter.outputs.hm-supervision-detect-objects }}
      hm-triton: ${{ steps.filter.outputs.hm-triton }}
      hm-xxhash: ${{ steps.filter.outputs.hm-xxhash }}
      hugging-face-analyze-sentiment: ${{ steps.filter.outputs.hugging-face-analyze-sentiment }}
      iads-config-reader: ${{ steps.filter.outputs.iads-config-reader }}
      iads-data-producer: ${{ steps.filter.outputs.iads-data-producer }}
      iads-data-reader: ${{ steps.filter.outputs.iads-data-reader }}
      kafka-rust-proto-consumer: ${{ steps.filter.outputs.kafka-rust-proto-consumer }}
      kafka-rust-proto-producer: ${{ steps.filter.outputs.kafka-rust-proto-producer }}
      kafka-rust-udp-kafka-bridge: ${{ steps.filter.outputs.kafka-rust-udp-kafka-bridge }}
      kafka-rust-zeromq-kafka-bridge: ${{ steps.filter.outputs.kafka-rust-zeromq-kafka-bridge }}
      lance: ${{ steps.filter.outputs.lance }}
      mineru: ${{ steps.filter.outputs.mineru }}
      mobile-android: ${{ steps.filter.outputs.mobile-android }}
      mobile-ios: ${{ steps.filter.outputs.mobile-ios }}
      mobile-react-native: ${{ steps.filter.outputs.mobile-react-native }}
      national-instruments-hm-pyvisa: ${{ steps.filter.outputs.national-instruments-hm-pyvisa }}
      national-instruments-hm-tdms: ${{ steps.filter.outputs.national-instruments-hm-tdms }}
      national-instruments-hm-veristand: ${{ steps.filter.outputs.national-instruments-hm-veristand }}
      national-instruments-veristand-zeromq-bridge: ${{ steps.filter.outputs.national-instruments-veristand-zeromq-bridge }}
      neural-forecasting-forecast-air-passenger-number: ${{ steps.filter.outputs.neural-forecasting-forecast-air-passenger-number }}
      nvidia-dali: ${{ steps.filter.outputs.nvidia-dali }}
      open-clip: ${{ steps.filter.outputs.open-clip }}
      pack-unpack-data: ${{ steps.filter.outputs.pack-unpack-data }}
      production-aws-glue-spark-scripts: ${{ steps.filter.outputs.production-aws-glue-spark-scripts }}
      prometheus: ${{ steps.filter.outputs.prometheus }}
      quantum-computing: ${{ steps.filter.outputs.quantum-computing }}
      reinforcement-learning-cart-pole: ${{ steps.filter.outputs.reinforcement-learning-cart-pole }}
      robot-operating-system: ${{ steps.filter.outputs.robot-operating-system }}
      rti-connext-dds: ${{ steps.filter.outputs.rti-connext-dds }}
      stable-diffusion: ${{ steps.filter.outputs.stable-diffusion }}
      taichi-count-primes: ${{ steps.filter.outputs.taichi-count-primes }}
      taichi-fluid-solver: ${{ steps.filter.outputs.taichi-fluid-solver }}
      udp-receiver: ${{ steps.filter.outputs.udp-receiver }}
      udp-sender: ${{ steps.filter.outputs.udp-sender }}
      web-cypress: ${{ steps.filter.outputs.web-cypress }}
      web: ${{ steps.filter.outputs.web }}
      windows-calculator: ${{ steps.filter.outputs.windows-calculator }}
      zeromq-iads-bridge: ${{ steps.filter.outputs.zeromq-iads-bridge }}

  lint:
    name: Lint
    uses: ./.github/workflows/.lint.yml
    secrets: inherit
    needs: detect-changes
    with:
      # Workflows
      workflow: ${{ needs.detect-changes.outputs.workflow-lint == 'true' }}
      # Languages
      ansible: ${{ needs.detect-changes.outputs.ansible == 'true' }}
      c-cpp: ${{ needs.detect-changes.outputs.c-cpp == 'true' }}
      cmake: ${{ needs.detect-changes.outputs.cmake == 'true' }}
      css: ${{ needs.detect-changes.outputs.css == 'true' }}
      dockerfile: ${{ needs.detect-changes.outputs.dockerfile == 'true' }}
      html: ${{ needs.detect-changes.outputs.html == 'true' }}
      json: ${{ needs.detect-changes.outputs.json == 'true' }}
      justfile: ${{ needs.detect-changes.outputs.justfile == 'true' }}
      kubernetes: ${{ needs.detect-changes.outputs.kubernetes == 'true' }}
      markdown: ${{ needs.detect-changes.outputs.markdown == 'true' }}
      matlab: ${{ needs.detect-changes.outputs.matlab == 'true' }}
      natural-language: ${{ needs.detect-changes.outputs.natural-language == 'true' }}
      python: ${{ needs.detect-changes.outputs.python == 'true' }}
      qml: ${{ needs.detect-changes.outputs.qml == 'true' }}
      ruby: ${{ needs.detect-changes.outputs.ruby == 'true' }}
      shell: ${{ needs.detect-changes.outputs.shell == 'true' }}
      solidity: ${{ needs.detect-changes.outputs.solidity == 'true' }}
      sql: ${{ needs.detect-changes.outputs.sql == 'true' }}
      terraform: ${{ needs.detect-changes.outputs.terraform == 'true' }}
      toml: ${{ needs.detect-changes.outputs.toml == 'true' }}
      verilog: ${{ needs.detect-changes.outputs.verilog == 'true' }}
      vhdl: ${{ needs.detect-changes.outputs.vhdl == 'true' }}
      xml: ${{ needs.detect-changes.outputs.xml == 'true' }}
      yaml: ${{ needs.detect-changes.outputs.yaml == 'true' }}
      # Applications
      api-go: ${{ needs.detect-changes.outputs.api-go == 'true' }}
      api-node: ${{ needs.detect-changes.outputs.api-node == 'true' }}
      api-rust: ${{ needs.detect-changes.outputs.api-rust == 'true' }}
      ethereum: ${{ needs.detect-changes.outputs.ethereum == 'true' }}
      grafana-hm-panel-plugin: ${{ needs.detect-changes.outputs.grafana-hm-panel-plugin == 'true' }}
      hm-spark-find-retired-people-scala: ${{ needs.detect-changes.outputs.hm-spark-find-retired-people-scala == 'true' }}
      hm-spark-ingest-from-s3-to-kafka: ${{ needs.detect-changes.outputs.hm-spark-ingest-from-s3-to-kafka == 'true' }}
      iads-data-producer: ${{ needs.detect-changes.outputs.iads-data-producer == 'true' }}
      kafka-rust-proto-consumer: ${{ needs.detect-changes.outputs.kafka-rust-proto-consumer == 'true' }}
      kafka-rust-proto-producer: ${{ needs.detect-changes.outputs.kafka-rust-proto-producer == 'true' }}
      kafka-rust-udp-kafka-bridge: ${{ needs.detect-changes.outputs.kafka-rust-udp-kafka-bridge == 'true' }}
      kafka-rust-zeromq-kafka-bridge: ${{ needs.detect-changes.outputs.kafka-rust-zeromq-kafka-bridge == 'true' }}
      mobile-android: ${{ needs.detect-changes.outputs.mobile-android == 'true' }}
      mobile-react-native: ${{ needs.detect-changes.outputs.mobile-react-native == 'true' }}
      national-instruments-veristand-zeromq-bridge: ${{ needs.detect-changes.outputs.national-instruments-veristand-zeromq-bridge == 'true' }}
      udp-receiver: ${{ needs.detect-changes.outputs.udp-receiver == 'true' }}
      udp-sender: ${{ needs.detect-changes.outputs.udp-sender == 'true' }}
      web-cypress: ${{ needs.detect-changes.outputs.web-cypress == 'true' }}
      web: ${{ needs.detect-changes.outputs.web == 'true' }}
      windows-calculator: ${{ needs.detect-changes.outputs.windows-calculator == 'true' }}
      zeromq-iads-bridge: ${{ needs.detect-changes.outputs.zeromq-iads-bridge == 'true' }}

  static-type-check:
    name: Static Type Check
    uses: ./.github/workflows/.static-type-check.yml
    secrets: inherit
    needs: detect-changes
    with:
      # Workflows
      workflow: ${{ needs.detect-changes.outputs.workflow-static-type-check == 'true' }}
      # Languages
      python: ${{ needs.detect-changes.outputs.python == 'true' }}
      terraform: ${{ needs.detect-changes.outputs.terraform == 'true' }}
      # Applications
      api-go: ${{ needs.detect-changes.outputs.api-go == 'true' }}
      api-node: ${{ needs.detect-changes.outputs.api-node == 'true' }}
      ethereum: ${{ needs.detect-changes.outputs.ethereum == 'true' }}
      grafana-hm-panel-plugin: ${{ needs.detect-changes.outputs.grafana-hm-panel-plugin == 'true' }}
      mobile-android: ${{ needs.detect-changes.outputs.mobile-android == 'true' }}
      mobile-react-native: ${{ needs.detect-changes.outputs.mobile-react-native == 'true' }}
      web-cypress: ${{ needs.detect-changes.outputs.web-cypress == 'true' }}
      web: ${{ needs.detect-changes.outputs.web == 'true' }}

  test-mobile:
    name: Test Mobile
    uses: ./.github/workflows/.test-mobile.yml
    secrets: inherit
    needs: detect-changes
    with:
      # Workflows
      workflow: ${{ needs.detect-changes.outputs.workflow-test-mobile == 'true' }}
      # Applications
      mobile-android: ${{ needs.detect-changes.outputs.mobile-android == 'true' }}
      mobile-ios: ${{ needs.detect-changes.outputs.mobile-ios == 'true' }}
      mobile-react-native: ${{ needs.detect-changes.outputs.mobile-react-native == 'true' }}

  test-web:
    name: Test Web
    uses: ./.github/workflows/.test-web.yml
    secrets: inherit
    needs: detect-changes
    with:
      # Workflows
      workflow: ${{ needs.detect-changes.outputs.workflow-test-web == 'true' }}
      # Applications
      api-node: ${{ needs.detect-changes.outputs.api-node == 'true' }}
      web-cypress: ${{ needs.detect-changes.outputs.web-cypress == 'true' }}
      web: ${{ needs.detect-changes.outputs.web == 'true' }}

  test-api:
    name: Test API
    uses: ./.github/workflows/.test-api.yml
    secrets: inherit
    needs: detect-changes
    with:
      # Workflows
      workflow: ${{ needs.detect-changes.outputs.workflow-test-api == 'true' }}
      # Applications
      api-go: ${{ needs.detect-changes.outputs.api-go == 'true' }}
      api-node: ${{ needs.detect-changes.outputs.api-node == 'true' }}
      api-python: ${{ needs.detect-changes.outputs.api-python == 'true' }}
      api-rust: ${{ needs.detect-changes.outputs.api-rust == 'true' }}

  test-data-orchestration:
    name: Test Data Orchestration
    uses: ./.github/workflows/.test-data-orchestration.yml
    secrets: inherit
    needs: detect-changes
    with:
      # Workflows
      workflow: ${{ needs.detect-changes.outputs.workflow-test-data-orchestration == 'true' }}
      # Applications
      hm-airflow: ${{ needs.detect-changes.outputs.hm-airflow == 'true' }}
      hm-prefect-calculate: ${{ needs.detect-changes.outputs.hm-prefect-calculate == 'true' }}
      hm-prefect-greet: ${{ needs.detect-changes.outputs.hm-prefect-greet == 'true' }}
      hm-prefect-print-platform: ${{ needs.detect-changes.outputs.hm-prefect-print-platform == 'true' }}

  test-data-processing:
    name: Test Data Processing
    uses: ./.github/workflows/.test-data-processing.yml
    secrets: inherit
    needs: detect-changes
    with:
      # Workflows
      workflow: ${{ needs.detect-changes.outputs.workflow-test-data-processing == 'true' }}
      # Applications
      flink-stream-tweets: ${{ needs.detect-changes.outputs.flink-stream-tweets == 'true' }}
      hm-spark-analyze-coffee-customers: ${{ needs.detect-changes.outputs.hm-spark-analyze-coffee-customers == 'true' }}
      hm-spark-find-retired-people-python: ${{ needs.detect-changes.outputs.hm-spark-find-retired-people-python == 'true' }}
      hm-spark-find-retired-people-scala: ${{ needs.detect-changes.outputs.hm-spark-find-retired-people-scala == 'true' }}
      hm-spark-find-taxi-top-routes-sql: ${{ needs.detect-changes.outputs.hm-spark-find-taxi-top-routes-sql == 'true' }}
      hm-spark-find-taxi-top-routes: ${{ needs.detect-changes.outputs.hm-spark-find-taxi-top-routes == 'true' }}
      hm-spark-ingest-from-s3-to-kafka: ${{ needs.detect-changes.outputs.hm-spark-ingest-from-s3-to-kafka == 'true' }}
      hm-spark-recommend-movies: ${{ needs.detect-changes.outputs.hm-spark-recommend-movies == 'true' }}
      kafka-rust-proto-consumer: ${{ needs.detect-changes.outputs.kafka-rust-proto-consumer == 'true' }}
      kafka-rust-proto-producer: ${{ needs.detect-changes.outputs.kafka-rust-proto-producer == 'true' }}
      kafka-rust-udp-kafka-bridge: ${{ needs.detect-changes.outputs.kafka-rust-udp-kafka-bridge == 'true' }}
      kafka-rust-zeromq-kafka-bridge: ${{ needs.detect-changes.outputs.kafka-rust-zeromq-kafka-bridge == 'true' }}

  test-data-transformation:
    name: Test Data Transformation
    uses: ./.github/workflows/.test-data-transformation.yml
    secrets: inherit
    needs: detect-changes
    with:
      # Workflows
      workflow: ${{ needs.detect-changes.outputs.workflow-test-data-transformation == 'true' }}
      # Applications
      dbt-hm-postgres: ${{ needs.detect-changes.outputs.dbt-hm-postgres == 'true' }}

  test-data-storage:
    name: Test Data Storage
    uses: ./.github/workflows/.test-data-storage.yml
    secrets: inherit
    needs: detect-changes
    with:
      # Workflows
      workflow: ${{ needs.detect-changes.outputs.workflow-test-data-storage == 'true' }}
      # Applications
      delta-lake-read-delta-lake-by-amazon-athena: ${{ needs.detect-changes.outputs.delta-lake-read-delta-lake-by-amazon-athena == 'true' }}
      delta-lake-read-delta-lake-by-trino: ${{ needs.detect-changes.outputs.delta-lake-read-delta-lake-by-trino == 'true' }}
      delta-lake-write-to-delta-lake: ${{ needs.detect-changes.outputs.delta-lake-write-to-delta-lake == 'true' }}
      hm-duckdb-query-duckdb: ${{ needs.detect-changes.outputs.hm-duckdb-query-duckdb == 'true' }}
      hm-duckdb-query-lance: ${{ needs.detect-changes.outputs.hm-duckdb-query-lance == 'true' }}
      hm-duckdb-query-parquet: ${{ needs.detect-changes.outputs.hm-duckdb-query-parquet == 'true' }}
      hm-duckdb-query-protobuf: ${{ needs.detect-changes.outputs.hm-duckdb-query-protobuf == 'true' }}
      hm-hdf5: ${{ needs.detect-changes.outputs.hm-hdf5 == 'true' }}
      hm-lancedb: ${{ needs.detect-changes.outputs.hm-lancedb == 'true' }}
      hm-protobuf: ${{ needs.detect-changes.outputs.hm-protobuf == 'true' }}
      lance: ${{ needs.detect-changes.outputs.lance == 'true' }}
      prometheus: ${{ needs.detect-changes.outputs.prometheus == 'true' }}

  test-data-analytics:
    name: Test Data Analytics
    uses: ./.github/workflows/.test-data-analytics.yml
    secrets: inherit
    needs: detect-changes
    with:
      # Workflows
      workflow: ${{ needs.detect-changes.outputs.workflow-test-data-analytics == 'true' }}
      # Applications
      hm-cudf: ${{ needs.detect-changes.outputs.hm-cudf == 'true' }}
      hm-cupy: ${{ needs.detect-changes.outputs.hm-cupy == 'true' }}
      hm-geopandas: ${{ needs.detect-changes.outputs.hm-geopandas == 'true' }}
      hm-networkx: ${{ needs.detect-changes.outputs.hm-networkx == 'true' }}
      hm-numba: ${{ needs.detect-changes.outputs.hm-numba == 'true' }}
      hm-pandas: ${{ needs.detect-changes.outputs.hm-pandas == 'true' }}
      hm-polars: ${{ needs.detect-changes.outputs.hm-polars == 'true' }}

  test-data-visualization:
    name: Test Data Visualization
    uses: ./.github/workflows/.test-data-visualization.yml
    secrets: inherit
    needs: detect-changes
    with:
      # Workflows
      workflow: ${{ needs.detect-changes.outputs.workflow-test-data-visualization == 'true' }}
      # Applications
      grafana-hm-dashboard: ${{ needs.detect-changes.outputs.grafana-hm-dashboard == 'true' }}
      grafana-hm-panel-plugin: ${{ needs.detect-changes.outputs.grafana-hm-panel-plugin == 'true' }}
      iads-config-reader: ${{ needs.detect-changes.outputs.iads-config-reader == 'true' }}
      iads-data-producer: ${{ needs.detect-changes.outputs.iads-data-producer == 'true' }}
      iads-data-reader: ${{ needs.detect-changes.outputs.iads-data-reader == 'true' }}
      zeromq-iads-bridge: ${{ needs.detect-changes.outputs.zeromq-iads-bridge == 'true' }}

  test-computing:
    name: Test Computing
    uses: ./.github/workflows/.test-computing.yml
    secrets: inherit
    needs: detect-changes
    with:
      # Workflows
      workflow: ${{ needs.detect-changes.outputs.workflow-test-computing == 'true' }}
      # Applications
      # Scientific Computing
      hm-sunpy: ${{ needs.detect-changes.outputs.hm-sunpy == 'true' }}
      # Parallel Computing
      hm-triton: ${{ needs.detect-changes.outputs.hm-triton == 'true' }}
      taichi-count-primes: ${{ needs.detect-changes.outputs.taichi-count-primes == 'true' }}
      taichi-fluid-solver: ${{ needs.detect-changes.outputs.taichi-fluid-solver == 'true' }}
      # High-Performance Computing
      hm-jax: ${{ needs.detect-changes.outputs.hm-jax == 'true' }}
      # Quantum Computing
      quantum-computing: ${{ needs.detect-changes.outputs.quantum-computing == 'true' }}
      # Cloud Computing
      hm-ray-calculate: ${{ needs.detect-changes.outputs.hm-ray-calculate == 'true' }}
      hm-ray-process-flight-data: ${{ needs.detect-changes.outputs.hm-ray-process-flight-data == 'true' }}
      hm-skypilot: ${{ needs.detect-changes.outputs.hm-skypilot == 'true' }}

  test-cloud:
    name: Test Cloud
    uses: ./.github/workflows/.test-cloud.yml
    secrets: inherit
    needs: detect-changes
    with:
      # Workflows
      workflow: ${{ needs.detect-changes.outputs.workflow-test-cloud == 'true' }}
      # Applications
      # Cloud Platform
      amazon-sagemaker-pytorch-mnist: ${{ needs.detect-changes.outputs.amazon-sagemaker-pytorch-mnist == 'true' }}
      hm-aws-parallelcluster: ${{ needs.detect-changes.outputs.hm-aws-parallelcluster == 'true' }}
      # Cloud Infrastructure
      hm-pulumi: ${{ needs.detect-changes.outputs.hm-pulumi == 'true' }}
      production-aws-glue-spark-scripts: ${{ needs.detect-changes.outputs.production-aws-glue-spark-scripts == 'true' }}
      # Cloud Security
      hm-prowler: ${{ needs.detect-changes.outputs.hm-prowler == 'true' }}

  test-machine-learning:
    name: Test Machine Learning
    uses: ./.github/workflows/.test-machine-learning.yml
    secrets: inherit
    needs: detect-changes
    with:
      # Workflows
      workflow: ${{ needs.detect-changes.outputs.workflow-test-machine-learning == 'true' }}
      # Applications
      amazon-sagemaker-triton-resnet-50-deploy: ${{ needs.detect-changes.outputs.amazon-sagemaker-triton-resnet-50-deploy == 'true' }}
      amazon-sagemaker-triton-resnet-50-infer: ${{ needs.detect-changes.outputs.amazon-sagemaker-triton-resnet-50-infer == 'true' }}
      convolutional-neural-network: ${{ needs.detect-changes.outputs.convolutional-neural-network == 'true' }}
      feature-store: ${{ needs.detect-changes.outputs.feature-store == 'true' }}
      graph-neural-network: ${{ needs.detect-changes.outputs.graph-neural-network == 'true' }}
      hm-autogluon: ${{ needs.detect-changes.outputs.hm-autogluon == 'true' }}
      hm-cuml: ${{ needs.detect-changes.outputs.hm-cuml == 'true' }}
      hm-docling: ${{ needs.detect-changes.outputs.hm-docling == 'true' }}
      hm-faster-whisper: ${{ needs.detect-changes.outputs.hm-faster-whisper == 'true' }}
      hm-flax: ${{ needs.detect-changes.outputs.hm-flax == 'true' }}
      hm-gradio-classify-image: ${{ needs.detect-changes.outputs.hm-gradio-classify-image == 'true' }}
      hm-kubeflow-calculate: ${{ needs.detect-changes.outputs.hm-kubeflow-calculate == 'true' }}
      hm-kubeflow-classify-mnist: ${{ needs.detect-changes.outputs.hm-kubeflow-classify-mnist == 'true' }}
      hm-langchain-chat-pdf: ${{ needs.detect-changes.outputs.hm-langchain-chat-pdf == 'true' }}
      hm-langgraph-chat-pdf: ${{ needs.detect-changes.outputs.hm-langgraph-chat-pdf == 'true' }}
      hm-llama-index-chat-pdf: ${{ needs.detect-changes.outputs.hm-llama-index-chat-pdf == 'true' }}
      hm-mlflow-classify-mnist: ${{ needs.detect-changes.outputs.hm-mlflow-classify-mnist == 'true' }}
      hm-mlflow-predict-diabetes: ${{ needs.detect-changes.outputs.hm-mlflow-predict-diabetes == 'true' }}
      hm-nvidia-modulus: ${{ needs.detect-changes.outputs.hm-nvidia-modulus == 'true' }}
      hm-rasa: ${{ needs.detect-changes.outputs.hm-rasa == 'true' }}
      hm-scikit-learn: ${{ needs.detect-changes.outputs.hm-scikit-learn == 'true' }}
      hm-sglang: ${{ needs.detect-changes.outputs.hm-sglang == 'true' }}
      hm-streamlit-live-line-chart: ${{ needs.detect-changes.outputs.hm-streamlit-live-line-chart == 'true' }}
      hm-streamlit-map: ${{ needs.detect-changes.outputs.hm-streamlit-map == 'true' }}
      hugging-face-analyze-sentiment: ${{ needs.detect-changes.outputs.hugging-face-analyze-sentiment == 'true' }}
      mineru: ${{ needs.detect-changes.outputs.mineru == 'true' }}
      neural-forecasting-forecast-air-passenger-number: ${{ needs.detect-changes.outputs.neural-forecasting-forecast-air-passenger-number == 'true' }}
      nvidia-dali: ${{ needs.detect-changes.outputs.nvidia-dali == 'true' }}
      reinforcement-learning-cart-pole: ${{ needs.detect-changes.outputs.reinforcement-learning-cart-pole == 'true' }}
      stable-diffusion: ${{ needs.detect-changes.outputs.stable-diffusion == 'true' }}

  test-computer-vision:
    name: Test Computer Vision
    uses: ./.github/workflows/.test-computer-vision.yml
    secrets: inherit
    needs: detect-changes
    with:
      # Workflows
      workflow: ${{ needs.detect-changes.outputs.workflow-test-computer-vision == 'true' }}
      # Applications
      hm-imagebind: ${{ needs.detect-changes.outputs.hm-imagebind == 'true' }}
      hm-open3d: ${{ needs.detect-changes.outputs.hm-open3d == 'true' }}
      hm-pyvista-mount-saint-helens: ${{ needs.detect-changes.outputs.hm-pyvista-mount-saint-helens == 'true' }}
      hm-supervision-detect-objects: ${{ needs.detect-changes.outputs.hm-supervision-detect-objects == 'true' }}
      open-clip: ${{ needs.detect-changes.outputs.open-clip == 'true' }}

  test-network-programmability:
    name: Test Network Programmability
    uses: ./.github/workflows/.test-network-programmability.yml
    secrets: inherit
    needs: detect-changes
    with:
      # Workflows
      workflow: ${{ needs.detect-changes.outputs.workflow-test-network-programmability == 'true' }}
      # Applications
      udp-receiver: ${{ needs.detect-changes.outputs.udp-receiver == 'true' }}
      udp-sender: ${{ needs.detect-changes.outputs.udp-sender == 'true' }}

  test-operating-system:
    name: Test Operating System
    uses: ./.github/workflows/.test-operating-system.yml
    secrets: inherit
    needs: detect-changes
    with:
      # Workflows
      workflow: ${{ needs.detect-changes.outputs.workflow-test-operating-system == 'true' }}
      # Applications
      windows-calculator: ${{ needs.detect-changes.outputs.windows-calculator == 'true' }}

  test-embedded-system:
    name: Test Embedded System
    uses: ./.github/workflows/.test-embedded-system.yml
    secrets: inherit
    needs: detect-changes
    with:
      # Workflows
      workflow: ${{ needs.detect-changes.outputs.workflow-test-embedded-system == 'true' }}
      # Applications
      decode-can-blf-data: ${{ needs.detect-changes.outputs.decode-can-blf-data == 'true' }}
      decode-can-mf4-data: ${{ needs.detect-changes.outputs.decode-can-mf4-data == 'true' }}
      decode-can-trc-data: ${{ needs.detect-changes.outputs.decode-can-trc-data == 'true' }}
      format-can-data: ${{ needs.detect-changes.outputs.format-can-data == 'true' }}
      hm-serial: ${{ needs.detect-changes.outputs.hm-serial == 'true' }}
      pack-unpack-data: ${{ needs.detect-changes.outputs.pack-unpack-data == 'true' }}

  test-hardware-in-the-loop:
    name: Test Hardware-in-the-Loop
    uses: ./.github/workflows/.test-hardware-in-the-loop.yml
    secrets: inherit
    needs: detect-changes
    with:
      # Workflows
      workflow: ${{ needs.detect-changes.outputs.workflow-test-hardware-in-the-loop == 'true' }}
      # Applications
      national-instruments-hm-pyvisa: ${{ needs.detect-changes.outputs.national-instruments-hm-pyvisa == 'true' }}
      national-instruments-hm-tdms: ${{ needs.detect-changes.outputs.national-instruments-hm-tdms == 'true' }}
      national-instruments-hm-veristand: ${{ needs.detect-changes.outputs.national-instruments-hm-veristand == 'true' }}

  test-aerospace:
    name: Test Aerospace
    uses: ./.github/workflows/.test-aerospace.yml
    secrets: inherit
    needs: detect-changes
    with:
      # Workflows
      workflow: ${{ needs.detect-changes.outputs.workflow-test-aerospace == 'true' }}
      # Applications
      hm-aerosandbox: ${{ needs.detect-changes.outputs.hm-aerosandbox == 'true' }}
      hm-openaerostruct: ${{ needs.detect-changes.outputs.hm-openaerostruct == 'true' }}

  genesis-test:
    name: Genesis | Test
    needs: detect-changes
    if: ${{ needs.detect-changes.outputs.workflow == 'true' || needs.detect-changes.outputs.hm-genesis == 'true' }}
    runs-on: ubuntu-24.04
    environment: test
    timeout-minutes: 10
    steps:
      - name: Checkout
        uses: actions/checkout@v4.2.2
      - name: Install uv
        uses: astral-sh/setup-uv@v5.2.2
        with:
          version: 0.5.20
          enable-cache: true
          cache-dependency-glob: physics/hm-genesis/uv.lock
      - name: Set up Python
        uses: actions/setup-python@v5.4.0
        with:
          python-version-file: physics/hm-genesis/pyproject.toml
      - name: Install dependencies
        working-directory: physics/hm-genesis
        run: |
          uv sync --dev
      - name: Test
        working-directory: physics/hm-genesis
        run: |
          uv run poe test-coverage
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v5.3.1
        with:
          directory: physics/hm-genesis

  call-matlab-function-in-python:
    name: Call MATLAB Function in Python | Test
    needs: detect-changes
    if: ${{ false }}
    # if: ${{ needs.detect-changes.outputs.workflow == 'true' || needs.detect-changes.outputs.call-matlab-function-in-python == 'true' }}
    runs-on: ubuntu-24.04
    environment: test
    timeout-minutes: 10
    steps:
      - name: Checkout
        uses: actions/checkout@v4.2.2
      - name: Set up MATLAB
        uses: matlab-actions/setup-matlab@v2.3.0
        with:
          release: R2024a
      - name: Install uv
        uses: astral-sh/setup-uv@v5.2.2
        with:
          version: 0.5.20
          enable-cache: true
          cache-dependency-glob: matlab/call-matlab-function-in-python/uv.lock
      - name: Set up Python
        uses: actions/setup-python@v5.4.0
        with:
          python-version-file: matlab/call-matlab-function-in-python/pyproject.toml
      - name: Install dependencies
        working-directory: matlab/call-matlab-function-in-python
        run: |
          uv sync --dev
      - name: Test
        working-directory: matlab/call-matlab-function-in-python
        run: |
          uv run poe test-coverage
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v5.3.1
        with:
          directory: matlab/call-matlab-function-in-python

  arrow-flight-client-test:
    name: Data Distribution Service | Test
    needs: detect-changes
    if: ${{ needs.detect-changes.outputs.workflow == 'true' || needs.detect-changes.outputs.arrow-flight-client == 'true' }}
    runs-on: ubuntu-24.04
    environment: test
    timeout-minutes: 10
    steps:
      - name: Checkout
        uses: actions/checkout@v4.2.2
      - name: Install uv
        uses: astral-sh/setup-uv@v5.2.2
        with:
          version: 0.5.20
          enable-cache: true
          cache-dependency-glob: data-distribution/arrow-flight/arrow-flight-client/uv.lock
      - name: Set up Python
        uses: actions/setup-python@v5.4.0
        with:
          python-version-file: data-distribution/arrow-flight/arrow-flight-client/pyproject.toml
      - name: Install dependencies
        working-directory: data-distribution/arrow-flight/arrow-flight-client
        run: |
          uv sync --dev
      - name: Test
        working-directory: data-distribution/arrow-flight/arrow-flight-client
        run: |
          uv run poe test-coverage
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v5.3.1
        with:
          directory: data-distribution/arrow-flight/arrow-flight-client

  arrow-flight-server-test:
    name: UDP Sender | Test
    if: ${{ inputs.workflow || inputs.arrow-flight-server }}
    runs-on: ubuntu-24.04
    environment: test
    timeout-minutes: 10
    steps:
      - name: Checkout
        uses: actions/checkout@v4.2.2
      # protoc is for prost
      - name: Install protoc
        uses: arduino/setup-protoc@v3.0.0
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}
          version: 28.3
      - name: Set up Rust
        uses: actions-rust-lang/setup-rust-toolchain@v1.10.1
      - name: Install dependencies
        working-directory: data-distribution/arrow-flight/arrow-flight-server
        run: |
          cargo build
      - name: Test
        working-directory: data-distribution/arrow-flight/arrow-flight-server
        run: |
          cargo test --all-features

  rti-connext-dds-test:
    name: Data Distribution Service | Test
    needs: detect-changes
    if: ${{ needs.detect-changes.outputs.workflow == 'true' || needs.detect-changes.outputs.rti-connext-dds == 'true' }}
    runs-on: ubuntu-24.04
    environment: test
    timeout-minutes: 10
    steps:
      - name: Checkout
        uses: actions/checkout@v4.2.2
      - name: Install uv
        uses: astral-sh/setup-uv@v5.2.2
        with:
          version: 0.5.20
          enable-cache: true
          cache-dependency-glob: data-distribution/rti-connext-dds/uv.lock
      - name: Set up Python
        uses: actions/setup-python@v5.4.0
        with:
          python-version-file: data-distribution/rti-connext-dds/pyproject.toml
      - name: Install dependencies
        working-directory: data-distribution/rti-connext-dds
        run: |
          uv sync --dev
      - name: Test
        working-directory: data-distribution/rti-connext-dds
        run: |
          uv run poe test-coverage
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v5.3.1
        with:
          directory: data-distribution/rti-connext-dds

  xxhash-test:
    name: xxHash | Test
    needs: detect-changes
    if: ${{ needs.detect-changes.outputs.workflow == 'true' || needs.detect-changes.outputs.hm-xxhash == 'true' }}
    runs-on: ubuntu-24.04
    environment: test
    timeout-minutes: 10
    steps:
      - name: Checkout
        uses: actions/checkout@v4.2.2
      - name: Install uv
        uses: astral-sh/setup-uv@v5.2.2
        with:
          version: 0.5.20
          enable-cache: true
          cache-dependency-glob: hm-xxhash/uv.lock
      - name: Set up Python
        uses: actions/setup-python@v5.4.0
        with:
          python-version-file: hm-xxhash/pyproject.toml
      - name: Install dependencies
        working-directory: hm-xxhash
        run: |
          uv sync --dev
      - name: Test
        working-directory: hm-xxhash
        run: |
          uv run poe test-coverage
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v5.3.1
        with:
          directory: hm-xxhash

  opa-test:
    name: OPA | Test
    needs: detect-changes
    if: ${{ needs.detect-changes.outputs.workflow == 'true' || needs.detect-changes.outputs.api-go == 'true' }}
    runs-on: ubuntu-24.04
    environment: test
    timeout-minutes: 10
    steps:
      - name: Checkout
        uses: actions/checkout@v4.2.2
      - name: Set up OPA
        uses: open-policy-agent/setup-opa@v2.2.0
        with:
          version: 0.70.0
      - name: Test
        run: |
          opa test api-go/internal/graphql_server/policies/*.rego -v

  ros-test:
    name: ROS | Test
    needs: detect-changes
    if: ${{ false }}
    # if: ${{ needs.detect-changes.outputs.workflow == 'true' || needs.detect-changes.outputs.robot-operating-system == 'true' }}
    runs-on: ubuntu-24.04
    environment: test
    timeout-minutes: 20
    container:
      image: ubuntu:noble
    steps:
      - name: Checkout
        uses: actions/checkout@v4.2.2
      - name: Setup ROS
        uses: ros-tooling/setup-ros@0.7.9
        with:
          required-ros-distributions: jazzy
      - name: Build and test
        uses: ros-tooling/action-ros-ci@0.3.16
        with:
          package-name: turtle_robot
          target-ros2-distro: jazzy

  hm-opal-client-build:
    name: HM OPAL Client | Build
    needs: detect-changes
    if: ${{ needs.detect-changes.outputs.workflow == 'true' || needs.detect-changes.outputs.hm-opal-client == 'true' }}
    runs-on: ubuntu-24.04
    environment: test
    timeout-minutes: 10
    steps:
      - name: Checkout
        uses: actions/checkout@v4.2.2
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3.8.0
      - name: Build Docker image
        uses: docker/build-push-action@v6.13.0
        with:
          context: .
          file: ./authorization/hm-opal-client/Dockerfile
          cache-from: type=gha
          cache-to: type=gha,mode=max

  code-review:
    name: Code Review
    if: ${{ false }}
    runs-on: ubuntu-24.04
    environment: test
    timeout-minutes: 10
    permissions:
      contents: read
      pull-requests: write
    steps:
      - name: Code Review
        uses: anc95/ChatGPT-CodeReview@v1.0.20
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
",False,False,False,False,False,False,False,False,False,False,False
